openapi: 3.0.3
info:
    title: Tabbycat API
    version: 1.3.0
    x-logo:
        url: /static/logo.svg
        altText: Tabbycat logo
    description: Parliamentary debate tabulation software
    contact:
        name: Étienne Beaulé
        email: ebeaule@tabbycat-debate.org
    license:
        name: AGPL 3
        url: https://www.gnu.org/licenses/agpl-3.0.en.html
paths:
    /api:
        get:
            operationId: api_retrieve
            description: API Entrypoint; info about versions
            summary: API root
            tags:
                - root
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Root"
                    description: ""
    /api/v1:
        get:
            operationId: api_v1_retrieve
            description: Entrypoint for version 1 of the API
            summary: API v1 root
            tags:
                - root
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/V1Root"
                    description: ""
    /api/v1/institutions:
        get:
            operationId: api_v1_institutions_list
            summary: List all institutions
            parameters:
                - name: limit
                  required: false
                  in: query
                  description: Number of results to return per page.
                  schema:
                      type: integer
                - name: offset
                  required: false
                  in: query
                  description: The initial index from which to return the results.
                  schema:
                      type: integer
                - in: query
                  name: region
                  schema:
                      type: string
                  description: Only include institutions from the region
            tags:
                - institutions
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/PaginatedInstitutionList"
                    description: ""
        post:
            operationId: api_v1_institutions_create
            summary: Create institution
            tags:
                - institutions
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Institution"
                required: true
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Institution"
                    description: ""
    /api/v1/institutions/{id}:
        get:
            operationId: api_v1_institutions_retrieve
            summary: Get institution
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
            tags:
                - institutions
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Institution"
                    description: ""
        post:
            operationId: api_v1_institutions_create_2
            summary: Update institution
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
            tags:
                - institutions
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Institution"
                required: true
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Institution"
                    description: ""
        patch:
            operationId: api_v1_institutions_partial_update
            summary: Patch institution
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
            tags:
                - institutions
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/PatchedInstitution"
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Institution"
                    description: ""
        delete:
            operationId: api_v1_institutions_destroy
            summary: Delete institution
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
            tags:
                - institutions
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "204":
                    description: No response body
    /api/v1/tournaments:
        get:
            operationId: api_v1_tournaments_list
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: List tournaments
            parameters:
                - name: limit
                  required: false
                  in: query
                  description: Number of results to return per page.
                  schema:
                      type: integer
                - name: offset
                  required: false
                  in: query
                  description: The initial index from which to return the results.
                  schema:
                      type: integer
            tags:
                - tournaments
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/PaginatedTournamentList"
                    description: ""
        post:
            operationId: api_v1_tournaments_create
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Create tournament
            tags:
                - tournaments
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Tournament"
                required: true
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Tournament"
                    description: ""
    /api/v1/tournaments/{tournament_slug}:
        get:
            operationId: api_v1_tournaments_retrieve
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Get tournament
            parameters:
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - tournaments
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Tournament"
                    description: ""
        post:
            operationId: api_v1_tournaments_create_2
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Change tournament
            parameters:
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - tournaments
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Tournament"
                required: true
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Tournament"
                    description: ""
        patch:
            operationId: api_v1_tournaments_partial_update
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Patch tournament
            parameters:
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - tournaments
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/PatchedTournament"
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Tournament"
                    description: ""
        delete:
            operationId: api_v1_tournaments_destroy
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Delete tournament
            parameters:
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - tournaments
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "204":
                    description: No response body
    /api/v1/tournaments/{tournament_slug}/adjudicators:
        get:
            operationId: api_v1_tournaments_adjudicators_list
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Get adjudicators in tournament
            parameters:
                - in: query
                  name: break
                  schema:
                      type: boolean
                      default: false
                  description: Only include breaking adjudicators
                - name: limit
                  required: false
                  in: query
                  description: Number of results to return per page.
                  schema:
                      type: integer
                - name: offset
                  required: false
                  in: query
                  description: The initial index from which to return the results.
                  schema:
                      type: integer
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - adjudicators
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/PaginatedAdjudicatorList"
                    description: ""
        post:
            operationId: api_v1_tournaments_adjudicators_create
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Create adjudicator
            parameters:
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - adjudicators
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Adjudicator"
                required: true
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Adjudicator"
                    description: ""
    /api/v1/tournaments/{tournament_slug}/adjudicators/{id}:
        get:
            operationId: api_v1_tournaments_adjudicators_retrieve
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Get adjudicator
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - adjudicators
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Adjudicator"
                    description: ""
        post:
            operationId: api_v1_tournaments_adjudicators_create_2
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Update adjudicator
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - adjudicators
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Adjudicator"
                required: true
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Adjudicator"
                    description: ""
        patch:
            operationId: api_v1_tournaments_adjudicators_partial_update
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Patch adjudicator
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - adjudicators
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/PatchedAdjudicator"
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Adjudicator"
                    description: ""
        delete:
            operationId: api_v1_tournaments_adjudicators_destroy
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Delete adjudicator
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - adjudicators
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "204":
                    description: No response body
    /api/v1/tournaments/{tournament_slug}/adjudicators/{id}/checkin:
        get:
            operationId: api_v1_tournaments_adjudicators_checkin_retrieve
            description: Get checkin status
            summary: Get adjudicator checkin status
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - adjudicators
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Checkin"
                    description: ""
        post:
            operationId: api_v1_tournaments_adjudicators_checkin_create
            description: Creates an identifier
            summary: Create adjudicator checkin identifier
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - adjudicators
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Checkin"
                    description: ""
        put:
            operationId: api_v1_tournaments_adjudicators_checkin_update
            description: Checks in
            summary: Check in adjudicator
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - adjudicators
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Checkin"
                    description: ""
        patch:
            operationId: api_v1_tournaments_adjudicators_checkin_partial_update
            description: Toggles the check-in status
            summary: Toggle adjudicator checkin status
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - adjudicators
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Checkin"
                    description: ""
        delete:
            operationId: api_v1_tournaments_adjudicators_checkin_destroy
            description: Checks out
            summary: Check out adjudicator
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - adjudicators
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Checkin"
                    description: ""
    /api/v1/tournaments/{tournament_slug}/break-categories:
        get:
            operationId: api_v1_tournaments_break_categories_list
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: List tournament break categories
            parameters:
                - name: limit
                  required: false
                  in: query
                  description: Number of results to return per page.
                  schema:
                      type: integer
                - name: offset
                  required: false
                  in: query
                  description: The initial index from which to return the results.
                  schema:
                      type: integer
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - break-categories
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/PaginatedBreakCategoryList"
                    description: ""
        post:
            operationId: api_v1_tournaments_break_categories_create
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Create break category
            parameters:
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - break-categories
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/BreakCategory"
                required: true
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/BreakCategory"
                    description: ""
    /api/v1/tournaments/{tournament_slug}/break-categories/{id}:
        get:
            operationId: api_v1_tournaments_break_categories_retrieve
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Get break category
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - break-categories
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/BreakCategory"
                    description: ""
        post:
            operationId: api_v1_tournaments_break_categories_create_2
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Update break category
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - break-categories
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/BreakCategory"
                required: true
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/BreakCategory"
                    description: ""
        patch:
            operationId: api_v1_tournaments_break_categories_partial_update
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Patch break category
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - break-categories
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/PatchedBreakCategory"
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/BreakCategory"
                    description: ""
        delete:
            operationId: api_v1_tournaments_break_categories_destroy
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Delete break category
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - break-categories
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "204":
                    description: No response body
    /api/v1/tournaments/{tournament_slug}/break-categories/{id}/break:
        get:
            operationId: api_v1_tournaments_break_categories_break_list
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Get breaking teams
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - break-categories
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/BreakingTeam"
                    description: ""
        post:
            operationId: api_v1_tournaments_break_categories_break_create
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Generate break
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - break-categories
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/BreakingTeam"
                required: true
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/BreakingTeam"
                    description: ""
        patch:
            operationId: api_v1_tournaments_break_categories_break_partial_update
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Update remark and regenerate break
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - break-categories
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/PatchedBreakingTeam"
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/BreakingTeam"
                    description: ""
        delete:
            operationId: api_v1_tournaments_break_categories_break_destroy
            description: Destroy is normally for a specific instance, now QuerySet.
            summary: Delete break
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - break-categories
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "204":
                    description: No response body
    /api/v1/tournaments/{tournament_slug}/break-categories/{id}/eligibility:
        get:
            operationId: api_v1_tournaments_break_categories_eligibility_retrieve
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Get break-eligible teams for category
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - break-categories
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/BreakEligibility"
                    description: ""
        put:
            operationId: api_v1_tournaments_break_categories_eligibility_update
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Update break eligibility of teams
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - break-categories
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/BreakEligibility"
                required: true
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/BreakEligibility"
                    description: ""
        patch:
            operationId: api_v1_tournaments_break_categories_eligibility_partial_update
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Add teams as break-eligible
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - break-categories
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/PatchedBreakEligibility"
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/BreakEligibility"
                    description: ""
    /api/v1/tournaments/{tournament_slug}/feedback:
        get:
            operationId: api_v1_tournaments_feedback_list
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: List all tournament feedback
            parameters:
                - name: limit
                  required: false
                  in: query
                  description: Number of results to return per page.
                  schema:
                      type: integer
                - name: offset
                  required: false
                  in: query
                  description: The initial index from which to return the results.
                  schema:
                      type: integer
                - in: query
                  name: round
                  schema:
                      type: array
                      items:
                          type: integer
                  description: The sequence of the rounds of the submitted feedback
                  explode: false
                - in: query
                  name: source
                  schema:
                      type: integer
                  description:
                      The ID of the participant submitting feedback; must be used in
                      conjunction with `source_type`
                - in: query
                  name: source_type
                  schema:
                      type: string
                      enum:
                          - adjudicator
                          - team
                  description: The type of participant submitter of the feedback
                - in: query
                  name: target
                  schema:
                      type: integer
                  description: The ID of the adjudicator receiving feedback
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - feedback
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/PaginatedFeedbackList"
                    description: ""
        post:
            operationId: api_v1_tournaments_feedback_create
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Create feedback
            parameters:
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - feedback
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Feedback"
                required: true
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Feedback"
                    description: ""
    /api/v1/tournaments/{tournament_slug}/feedback-questions:
        get:
            operationId: api_v1_tournaments_feedback_questions_list
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: List tournament feedback questions
            parameters:
                - in: query
                  name: from_adj
                  schema:
                      type: boolean
                      default: false
                  description: Only include questions given to adjudicators
                - in: query
                  name: from_team
                  schema:
                      type: boolean
                      default: false
                  description: Only include questions given to teams
                - name: limit
                  required: false
                  in: query
                  description: Number of results to return per page.
                  schema:
                      type: integer
                - name: offset
                  required: false
                  in: query
                  description: The initial index from which to return the results.
                  schema:
                      type: integer
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - feedback
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/PaginatedFeedbackQuestionList"
                    description: ""
        post:
            operationId: api_v1_tournaments_feedback_questions_create
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Create feedback question
            parameters:
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - feedback
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/FeedbackQuestion"
                required: true
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/FeedbackQuestion"
                    description: ""
    /api/v1/tournaments/{tournament_slug}/feedback-questions/{id}:
        get:
            operationId: api_v1_tournaments_feedback_questions_retrieve
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Get feedback question
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - feedback
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/FeedbackQuestion"
                    description: ""
        post:
            operationId: api_v1_tournaments_feedback_questions_create_2
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Update feedback question
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - feedback
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/FeedbackQuestion"
                required: true
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/FeedbackQuestion"
                    description: ""
        patch:
            operationId: api_v1_tournaments_feedback_questions_partial_update
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Patch feedback question
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - feedback
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/PatchedFeedbackQuestion"
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/FeedbackQuestion"
                    description: ""
        delete:
            operationId: api_v1_tournaments_feedback_questions_destroy
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Delete feedback question
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - feedback
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "204":
                    description: No response body
    /api/v1/tournaments/{tournament_slug}/feedback/{id}:
        get:
            operationId: api_v1_tournaments_feedback_retrieve
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Get feedback
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - feedback
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Feedback"
                    description: ""
        post:
            operationId: api_v1_tournaments_feedback_create_2
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Update feedback
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - feedback
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Feedback"
                required: true
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Feedback"
                    description: ""
        patch:
            operationId: api_v1_tournaments_feedback_partial_update
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Patch feedback
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - feedback
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/PatchedFeedback"
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Feedback"
                    description: ""
        delete:
            operationId: api_v1_tournaments_feedback_destroy
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Delete feedback
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - feedback
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "204":
                    description: No response body
    /api/v1/tournaments/{tournament_slug}/institutions:
        get:
            operationId: api_v1_tournaments_institutions_list
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: List institutions in tournament
            parameters:
                - name: limit
                  required: false
                  in: query
                  description: Number of results to return per page.
                  schema:
                      type: integer
                - name: offset
                  required: false
                  in: query
                  description: The initial index from which to return the results.
                  schema:
                      type: integer
                - in: query
                  name: region
                  schema:
                      type: string
                  description: Only include institutions from the region
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - institutions
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/PaginatedPerTournamentInstitutionList"
                    description: ""
    /api/v1/tournaments/{tournament_slug}/motions:
        get:
            operationId: api_v1_tournaments_motions_list
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: List tournament motions
            parameters:
                - name: limit
                  required: false
                  in: query
                  description: Number of results to return per page.
                  schema:
                      type: integer
                - name: offset
                  required: false
                  in: query
                  description: The initial index from which to return the results.
                  schema:
                      type: integer
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - motions
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/PaginatedMotionList"
                    description: ""
        post:
            operationId: api_v1_tournaments_motions_create
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Create motion
            parameters:
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - motions
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Motion"
                required: true
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Motion"
                    description: ""
    /api/v1/tournaments/{tournament_slug}/motions/{id}:
        get:
            operationId: api_v1_tournaments_motions_retrieve
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Get motion
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - motions
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Motion"
                    description: ""
        post:
            operationId: api_v1_tournaments_motions_create_2
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Update motion
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - motions
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Motion"
                required: true
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Motion"
                    description: ""
        patch:
            operationId: api_v1_tournaments_motions_partial_update
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Patch motion
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - motions
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/PatchedMotion"
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Motion"
                    description: ""
        delete:
            operationId: api_v1_tournaments_motions_destroy
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Delete motion
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - motions
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "204":
                    description: No response body
    /api/v1/tournaments/{tournament_slug}/preferences:
        get:
            operationId: api_v1_tournaments_preferences_list
            summary: List tournament preferences
            parameters:
                - name: limit
                  required: false
                  in: query
                  description: Number of results to return per page.
                  schema:
                      type: integer
                - name: offset
                  required: false
                  in: query
                  description: The initial index from which to return the results.
                  schema:
                      type: integer
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - tournaments
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/PaginatedPreferenceList"
                    description: ""
    /api/v1/tournaments/{tournament_slug}/preferences/{id}:
        get:
            operationId: api_v1_tournaments_preferences_retrieve
            summary: Get tournament preference
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: A unique integer value identifying this tournament preference.
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - tournaments
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Preference"
                    description: ""
        put:
            operationId: api_v1_tournaments_preferences_update
            summary: Modify tournament preference
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: A unique integer value identifying this tournament preference.
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - tournaments
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Preference"
                required: true
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Preference"
                    description: ""
        patch:
            operationId: api_v1_tournaments_preferences_partial_update
            summary: Patch tournament preference
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: A unique integer value identifying this tournament preference.
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - tournaments
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/PatchedPreference"
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Preference"
                    description: ""
    /api/v1/tournaments/{tournament_slug}/preferences/bulk:
        post:
            operationId: api_v1_tournaments_preferences_bulk_create
            description: |-
                Update multiple preferences at once

                this is a long method because we ensure everything is valid
                before actually persisting the changes
            summary: Update multiple tournament preferences
            parameters:
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - tournaments
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Preference"
                required: true
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Preference"
                    description: ""
    /api/v1/tournaments/{tournament_slug}/rounds:
        get:
            operationId: api_v1_tournaments_rounds_list
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: List rounds of a tournament
            parameters:
                - name: limit
                  required: false
                  in: query
                  description: Number of results to return per page.
                  schema:
                      type: integer
                - name: offset
                  required: false
                  in: query
                  description: The initial index from which to return the results.
                  schema:
                      type: integer
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - rounds
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/PaginatedRoundList"
                    description: ""
        post:
            operationId: api_v1_tournaments_rounds_create
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Create round
            parameters:
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - rounds
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Round"
                required: true
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Round"
                    description: ""
    /api/v1/tournaments/{tournament_slug}/rounds/{round_seq}:
        get:
            operationId: api_v1_tournaments_rounds_retrieve
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Get round
            parameters:
                - in: path
                  name: round_seq
                  schema:
                      type: integer
                  description: The round's sequence number
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - rounds
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Round"
                    description: ""
        post:
            operationId: api_v1_tournaments_rounds_create_2
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Update round
            parameters:
                - in: path
                  name: round_seq
                  schema:
                      type: integer
                  description: The round's sequence number
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - rounds
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Round"
                required: true
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Round"
                    description: ""
        patch:
            operationId: api_v1_tournaments_rounds_partial_update
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Patch round
            parameters:
                - in: path
                  name: round_seq
                  schema:
                      type: integer
                  description: The round's sequence number
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - rounds
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/PatchedRound"
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Round"
                    description: ""
        delete:
            operationId: api_v1_tournaments_rounds_destroy
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Delete round
            parameters:
                - in: path
                  name: round_seq
                  schema:
                      type: integer
                  description: The round's sequence number
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - rounds
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "204":
                    description: No response body
    /api/v1/tournaments/{tournament_slug}/rounds/{round_seq}/availabilities:
        get:
            operationId: api_v1_tournaments_rounds_availabilities_list
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Get all availabilities of the round
            parameters:
                - in: query
                  name: adjudicators
                  schema:
                      type: boolean
                      default: false
                  description: Only include adjudicators
                - in: path
                  name: round_seq
                  schema:
                      type: integer
                  description: The round's sequence number
                  required: true
                - in: query
                  name: teams
                  schema:
                      type: boolean
                      default: false
                  description: Only include teams
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
                - in: query
                  name: venues
                  schema:
                      type: boolean
                      default: false
                  description: Only include rooms
            tags:
                - availabilities
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    type: string
                                    format: uri
                    description: ""
        post:
            operationId: api_v1_tournaments_rounds_availabilities_create
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Mark objects as unavailable
            parameters:
                - in: path
                  name: round_seq
                  schema:
                      type: integer
                  description: The round's sequence number
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - availabilities
            requestBody:
                content:
                    application/json:
                        schema:
                            type: array
                            items:
                                type: string
                                format: uri
                required: true
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    type: string
                                    format: uri
                    description: ""
        put:
            operationId: api_v1_tournaments_rounds_availabilities_update
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Mark objects as available
            parameters:
                - in: path
                  name: round_seq
                  schema:
                      type: integer
                  description: The round's sequence number
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - availabilities
            requestBody:
                content:
                    application/json:
                        schema:
                            type: array
                            items:
                                type: string
                                format: uri
                required: true
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    type: string
                                    format: uri
                    description: ""
        patch:
            operationId: api_v1_tournaments_rounds_availabilities_partial_update
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Toggle the availabilities of the included objects
            parameters:
                - in: path
                  name: round_seq
                  schema:
                      type: integer
                  description: The round's sequence number
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - availabilities
            requestBody:
                content:
                    application/json:
                        schema:
                            type: array
                            items:
                                type: string
                                format: uri
                required: true
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    type: string
                                    format: uri
                    description: ""
        delete:
            operationId: api_v1_tournaments_rounds_availabilities_destroy
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Delete class of availabilities
            parameters:
                - in: query
                  name: adjudicators
                  schema:
                      type: boolean
                      default: false
                  description: Only include adjudicators
                - in: path
                  name: round_seq
                  schema:
                      type: integer
                  description: The round's sequence number
                  required: true
                - in: query
                  name: teams
                  schema:
                      type: boolean
                      default: false
                  description: Only include teams
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
                - in: query
                  name: venues
                  schema:
                      type: boolean
                      default: false
                  description: Only include rooms
            tags:
                - availabilities
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "204":
                    description: No response body
    /api/v1/tournaments/{tournament_slug}/rounds/{round_seq}/pairings:
        get:
            operationId: api_v1_tournaments_rounds_pairings_list
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: List pairings in round
            parameters:
                - name: limit
                  required: false
                  in: query
                  description: Number of results to return per page.
                  schema:
                      type: integer
                - name: offset
                  required: false
                  in: query
                  description: The initial index from which to return the results.
                  schema:
                      type: integer
                - in: path
                  name: round_seq
                  schema:
                      type: integer
                  description: The round's sequence number
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - debates
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/PaginatedRoundPairingList"
                    description: ""
        post:
            operationId: api_v1_tournaments_rounds_pairings_create
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Create pairing
            parameters:
                - in: path
                  name: round_seq
                  schema:
                      type: integer
                  description: The round's sequence number
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - debates
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/RoundPairing"
                required: true
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/RoundPairing"
                    description: ""
        delete:
            operationId: api_v1_tournaments_rounds_pairings_destroy
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Delete all pairings in the round
            parameters:
                - in: path
                  name: round_seq
                  schema:
                      type: integer
                  description: The round's sequence number
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - debates
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "204":
                    description: No response body
    /api/v1/tournaments/{tournament_slug}/rounds/{round_seq}/pairings/{debate_pk}:
        get:
            operationId: api_v1_tournaments_rounds_pairings_retrieve
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Get pairing
            parameters:
                - in: path
                  name: debate_pk
                  schema:
                      type: integer
                  description: The debate's primary key
                  required: true
                - in: path
                  name: round_seq
                  schema:
                      type: integer
                  description: The round's sequence number
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - debates
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/RoundPairing"
                    description: ""
        post:
            operationId: api_v1_tournaments_rounds_pairings_create_2
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Update pairing
            parameters:
                - in: path
                  name: debate_pk
                  schema:
                      type: integer
                  description: The debate's primary key
                  required: true
                - in: path
                  name: round_seq
                  schema:
                      type: integer
                  description: The round's sequence number
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - debates
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/RoundPairing"
                required: true
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/RoundPairing"
                    description: ""
        patch:
            operationId: api_v1_tournaments_rounds_pairings_partial_update
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Patch pairing
            parameters:
                - in: path
                  name: debate_pk
                  schema:
                      type: integer
                  description: The debate's primary key
                  required: true
                - in: path
                  name: round_seq
                  schema:
                      type: integer
                  description: The round's sequence number
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - debates
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/PatchedRoundPairing"
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/RoundPairing"
                    description: ""
        delete:
            operationId: api_v1_tournaments_rounds_pairings_destroy_2
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Delete pairing
            parameters:
                - in: path
                  name: debate_pk
                  schema:
                      type: integer
                  description: The debate's primary key
                  required: true
                - in: path
                  name: round_seq
                  schema:
                      type: integer
                  description: The round's sequence number
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - debates
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "204":
                    description: No response body
    /api/v1/tournaments/{tournament_slug}/rounds/{round_seq}/pairings/{debate_pk}/ballots:
        get:
            operationId: api_v1_tournaments_rounds_pairings_ballots_list
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Get debate ballots
            parameters:
                - in: query
                  name: confirmed
                  schema:
                      type: boolean
                      default: false
                  description: Only include confirmed ballots
                - in: path
                  name: debate_pk
                  schema:
                      type: integer
                  description: The debate's primary key
                  required: true
                - name: limit
                  required: false
                  in: query
                  description: Number of results to return per page.
                  schema:
                      type: integer
                - name: offset
                  required: false
                  in: query
                  description: The initial index from which to return the results.
                  schema:
                      type: integer
                - in: path
                  name: round_seq
                  schema:
                      type: integer
                  description: The round's sequence number
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - results
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/PaginatedBallotList"
                    description: ""
        post:
            operationId: api_v1_tournaments_rounds_pairings_ballots_create
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Create ballot
            parameters:
                - in: path
                  name: debate_pk
                  schema:
                      type: integer
                  description: The debate's primary key
                  required: true
                - in: path
                  name: round_seq
                  schema:
                      type: integer
                  description: The round's sequence number
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - results
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Ballot"
                required: true
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Ballot"
                    description: ""
    /api/v1/tournaments/{tournament_slug}/rounds/{round_seq}/pairings/{debate_pk}/ballots/{id}:
        get:
            operationId: api_v1_tournaments_rounds_pairings_ballots_retrieve
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Get ballot
            parameters:
                - in: path
                  name: debate_pk
                  schema:
                      type: integer
                  description: The debate's primary key
                  required: true
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: round_seq
                  schema:
                      type: integer
                  description: The round's sequence number
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - results
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Ballot"
                    description: ""
        post:
            operationId: api_v1_tournaments_rounds_pairings_ballots_create_2
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Update ballot
            parameters:
                - in: path
                  name: debate_pk
                  schema:
                      type: integer
                  description: The debate's primary key
                  required: true
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: round_seq
                  schema:
                      type: integer
                  description: The round's sequence number
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - results
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/UpdateBallot"
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Ballot"
                    description: ""
        patch:
            operationId: api_v1_tournaments_rounds_pairings_ballots_partial_update
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Patch ballot
            parameters:
                - in: path
                  name: debate_pk
                  schema:
                      type: integer
                  description: The debate's primary key
                  required: true
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: round_seq
                  schema:
                      type: integer
                  description: The round's sequence number
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - results
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/PatchedUpdateBallot"
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Ballot"
                    description: ""
        delete:
            operationId: api_v1_tournaments_rounds_pairings_ballots_destroy
            description: Only mark as discarded; don't allow object deletion.
            summary: Delete ballot
            parameters:
                - in: path
                  name: debate_pk
                  schema:
                      type: integer
                  description: The debate's primary key
                  required: true
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: round_seq
                  schema:
                      type: integer
                  description: The round's sequence number
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - results
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Ballot"
                    description: ""
    /api/v1/tournaments/{tournament_slug}/rounds/{round_seq}/preformed-panels:
        get:
            operationId: api_v1_tournaments_rounds_preformed_panels_list
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: List all preformed panels in the round
            parameters:
                - name: limit
                  required: false
                  in: query
                  description: Number of results to return per page.
                  schema:
                      type: integer
                - name: offset
                  required: false
                  in: query
                  description: The initial index from which to return the results.
                  schema:
                      type: integer
                - in: path
                  name: round_seq
                  schema:
                      type: integer
                  description: The round's sequence number
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - debates
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/PaginatedPreformedPanelList"
                    description: ""
        post:
            operationId: api_v1_tournaments_rounds_preformed_panels_create
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Create preformed panel
            parameters:
                - in: path
                  name: round_seq
                  schema:
                      type: integer
                  description: The round's sequence number
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - debates
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/PreformedPanel"
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/PreformedPanel"
                    description: ""
        put:
            operationId: api_v1_tournaments_rounds_preformed_panels_update
            description: Adds new complete set of panels, with calculated bracket and liveness.
            summary: Add blank preformed panels
            parameters:
                - in: path
                  name: round_seq
                  schema:
                      type: integer
                  description: The round's sequence number
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - debates
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/PreformedPanel"
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/PreformedPanel"
                    description: ""
        delete:
            operationId: api_v1_tournaments_rounds_preformed_panels_destroy
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Delete all preformed panels from round
            parameters:
                - in: path
                  name: round_seq
                  schema:
                      type: integer
                  description: The round's sequence number
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - debates
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "204":
                    description: No response body
    /api/v1/tournaments/{tournament_slug}/rounds/{round_seq}/preformed-panels/{debate_pk}:
        get:
            operationId: api_v1_tournaments_rounds_preformed_panels_retrieve
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Get preformed panel
            parameters:
                - in: path
                  name: debate_pk
                  schema:
                      type: integer
                  description: The debate's primary key
                  required: true
                - in: path
                  name: round_seq
                  schema:
                      type: integer
                  description: The round's sequence number
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - debates
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/PreformedPanel"
                    description: ""
        post:
            operationId: api_v1_tournaments_rounds_preformed_panels_create_2
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Update preformed panel
            parameters:
                - in: path
                  name: debate_pk
                  schema:
                      type: integer
                  description: The debate's primary key
                  required: true
                - in: path
                  name: round_seq
                  schema:
                      type: integer
                  description: The round's sequence number
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - debates
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/PreformedPanel"
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/PreformedPanel"
                    description: ""
        patch:
            operationId: api_v1_tournaments_rounds_preformed_panels_partial_update
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Patch preformed panel
            parameters:
                - in: path
                  name: debate_pk
                  schema:
                      type: integer
                  description: The debate's primary key
                  required: true
                - in: path
                  name: round_seq
                  schema:
                      type: integer
                  description: The round's sequence number
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - debates
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/PatchedPreformedPanel"
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/PreformedPanel"
                    description: ""
        delete:
            operationId: api_v1_tournaments_rounds_preformed_panels_destroy_2
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Delete preformed panel
            parameters:
                - in: path
                  name: debate_pk
                  schema:
                      type: integer
                  description: The debate's primary key
                  required: true
                - in: path
                  name: round_seq
                  schema:
                      type: integer
                  description: The round's sequence number
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - debates
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "204":
                    description: No response body
    /api/v1/tournaments/{tournament_slug}/score-criteria:
        get:
            operationId: api_v1_tournaments_score_criteria_list
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: List all score criteria in tournament
            parameters:
                - name: limit
                  required: false
                  in: query
                  description: Number of results to return per page.
                  schema:
                      type: integer
                - name: offset
                  required: false
                  in: query
                  description: The initial index from which to return the results.
                  schema:
                      type: integer
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - scorecriteria
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/PaginatedScoreCriterionList"
                    description: ""
        post:
            operationId: api_v1_tournaments_score_criteria_create
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Create score criterion
            parameters:
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - scorecriteria
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/ScoreCriterion"
                required: true
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ScoreCriterion"
                    description: ""
    /api/v1/tournaments/{tournament_slug}/score-criteria/{id}:
        get:
            operationId: api_v1_tournaments_score_criteria_retrieve
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Get score criterion
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - scorecriteria
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ScoreCriterion"
                    description: ""
        post:
            operationId: api_v1_tournaments_score_criteria_create_2
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Update score criterion
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - scorecriteria
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/ScoreCriterion"
                required: true
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ScoreCriterion"
                    description: ""
        patch:
            operationId: api_v1_tournaments_score_criteria_partial_update
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Patch score criterion
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - scorecriteria
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/PatchedScoreCriterion"
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ScoreCriterion"
                    description: ""
        delete:
            operationId: api_v1_tournaments_score_criteria_destroy
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Delete score criterion
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - scorecriteria
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "204":
                    description: No response body
    /api/v1/tournaments/{tournament_slug}/speaker-categories:
        get:
            operationId: api_v1_tournaments_speaker_categories_list
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: List tournament speaker categories
            parameters:
                - name: limit
                  required: false
                  in: query
                  description: Number of results to return per page.
                  schema:
                      type: integer
                - name: offset
                  required: false
                  in: query
                  description: The initial index from which to return the results.
                  schema:
                      type: integer
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - speaker-categories
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/PaginatedSpeakerCategoryList"
                    description: ""
        post:
            operationId: api_v1_tournaments_speaker_categories_create
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Create speaker category
            parameters:
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - speaker-categories
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/SpeakerCategory"
                required: true
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/SpeakerCategory"
                    description: ""
    /api/v1/tournaments/{tournament_slug}/speaker-categories/{id}:
        get:
            operationId: api_v1_tournaments_speaker_categories_retrieve
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Get speaker category
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - speaker-categories
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/SpeakerCategory"
                    description: ""
        post:
            operationId: api_v1_tournaments_speaker_categories_create_2
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Update speaker category
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - speaker-categories
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/SpeakerCategory"
                required: true
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/SpeakerCategory"
                    description: ""
        patch:
            operationId: api_v1_tournaments_speaker_categories_partial_update
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Patch speaker category
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - speaker-categories
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/PatchedSpeakerCategory"
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/SpeakerCategory"
                    description: ""
        delete:
            operationId: api_v1_tournaments_speaker_categories_destroy
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Delete speaker category
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - speaker-categories
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "204":
                    description: No response body
    /api/v1/tournaments/{tournament_slug}/speaker-categories/{id}/eligibility:
        get:
            operationId: api_v1_tournaments_speaker_categories_eligibility_retrieve
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Get speaker category membership
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - speaker-categories
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/SpeakerEligibility"
                    description: ""
        put:
            operationId: api_v1_tournaments_speaker_categories_eligibility_update
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Update membership of speaker category
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - speaker-categories
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/SpeakerEligibility"
                required: true
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/SpeakerEligibility"
                    description: ""
        patch:
            operationId: api_v1_tournaments_speaker_categories_eligibility_partial_update
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Add speakers to category
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - speaker-categories
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/PatchedSpeakerEligibility"
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/SpeakerEligibility"
                    description: ""
    /api/v1/tournaments/{tournament_slug}/speakers:
        get:
            operationId: api_v1_tournaments_speakers_list
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: List speakers in tournament
            parameters:
                - name: limit
                  required: false
                  in: query
                  description: Number of results to return per page.
                  schema:
                      type: integer
                - name: offset
                  required: false
                  in: query
                  description: The initial index from which to return the results.
                  schema:
                      type: integer
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - teams
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/PaginatedSpeakerList"
                    description: ""
        post:
            operationId: api_v1_tournaments_speakers_create
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Add speaker
            parameters:
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - teams
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Speaker"
                required: true
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Speaker"
                    description: ""
    /api/v1/tournaments/{tournament_slug}/speakers/{id}:
        get:
            operationId: api_v1_tournaments_speakers_retrieve
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Get speaker
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - teams
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Speaker"
                    description: ""
        post:
            operationId: api_v1_tournaments_speakers_create_2
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Update speaker
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - teams
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Speaker"
                required: true
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Speaker"
                    description: ""
        patch:
            operationId: api_v1_tournaments_speakers_partial_update
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Patch speaker
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - teams
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/PatchedSpeaker"
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Speaker"
                    description: ""
        delete:
            operationId: api_v1_tournaments_speakers_destroy
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Delete speaker
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - teams
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "204":
                    description: No response body
    /api/v1/tournaments/{tournament_slug}/speakers/{id}/checkin:
        get:
            operationId: api_v1_tournaments_speakers_checkin_retrieve
            description: Get checkin status
            summary: Get speaker checkin status
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - teams
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Checkin"
                    description: ""
        post:
            operationId: api_v1_tournaments_speakers_checkin_create
            description: Creates an identifier
            summary: Create speaker checkin identifier
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - teams
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Checkin"
                    description: ""
        put:
            operationId: api_v1_tournaments_speakers_checkin_update
            description: Checks in
            summary: Check in speaker
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - teams
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Checkin"
                    description: ""
        patch:
            operationId: api_v1_tournaments_speakers_checkin_partial_update
            description: Toggles the check-in status
            summary: Toggle speaker checkin status
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - teams
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Checkin"
                    description: ""
        delete:
            operationId: api_v1_tournaments_speakers_checkin_destroy
            description: Checks out
            summary: Check out speaker
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - teams
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Checkin"
                    description: ""
    /api/v1/tournaments/{tournament_slug}/speakers/standings:
        get:
            operationId: api_v1_tournaments_speakers_standings_list
            description: Get current standings
            summary: Get substantive speaker standings
            parameters:
                - in: query
                  name: category
                  schema:
                      type: integer
                  description: Only include participants in a category (ID)
                - in: query
                  name: extra_metrics
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - total
                              - average
                              - trimmed_mean
                              - team_points
                              - stdev
                              - count
                              - replies_sum
                              - replies_avg
                              - replies_stddev
                              - replies_count
                              - srank
                  description:
                      Include these unranked metrics for participants; default is tournament
                      settings
                  explode: false
                - name: limit
                  required: false
                  in: query
                  description: Number of results to return per page.
                  schema:
                      type: integer
                - in: query
                  name: metrics
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - total
                              - average
                              - trimmed_mean
                              - team_points
                              - stdev
                              - count
                              - replies_sum
                              - replies_avg
                              - replies_stddev
                              - replies_count
                              - srank
                  description: Rank participants with these metrics; default is tournament settings
                  explode: false
                - name: offset
                  required: false
                  in: query
                  description: The initial index from which to return the results.
                  schema:
                      type: integer
                - in: query
                  name: round
                  schema:
                      type: integer
                  description: Sequence of last round to take into account
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - standings
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/PaginatedSpeakerStandingsList"
                    description: ""
    /api/v1/tournaments/{tournament_slug}/speakers/standings/replies:
        get:
            operationId: api_v1_tournaments_speakers_standings_replies_list
            description: Get current standings
            summary: Get reply speaker standings
            parameters:
                - in: query
                  name: category
                  schema:
                      type: integer
                  description: Only include participants in a category (ID)
                - in: query
                  name: extra_metrics
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - total
                              - average
                              - trimmed_mean
                              - team_points
                              - stdev
                              - count
                              - replies_sum
                              - replies_avg
                              - replies_stddev
                              - replies_count
                              - srank
                  description:
                      Include these unranked metrics for participants; default is tournament
                      settings
                  explode: false
                - name: limit
                  required: false
                  in: query
                  description: Number of results to return per page.
                  schema:
                      type: integer
                - in: query
                  name: metrics
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - total
                              - average
                              - trimmed_mean
                              - team_points
                              - stdev
                              - count
                              - replies_sum
                              - replies_avg
                              - replies_stddev
                              - replies_count
                              - srank
                  description: Rank participants with these metrics; default is tournament settings
                  explode: false
                - name: offset
                  required: false
                  in: query
                  description: The initial index from which to return the results.
                  schema:
                      type: integer
                - in: query
                  name: round
                  schema:
                      type: integer
                  description: Sequence of last round to take into account
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - standings
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/PaginatedSpeakerStandingsList"
                    description: ""
    /api/v1/tournaments/{tournament_slug}/speakers/standings/rounds:
        get:
            operationId: api_v1_tournaments_speakers_standings_rounds_list
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Get speaker scores per round
            parameters:
                - in: query
                  name: ghost
                  schema:
                      type: boolean
                      default: false
                  description: Include ghost (iron-person) scores
                - name: limit
                  required: false
                  in: query
                  description: Number of results to return per page.
                  schema:
                      type: integer
                - name: offset
                  required: false
                  in: query
                  description: The initial index from which to return the results.
                  schema:
                      type: integer
                - in: query
                  name: replies
                  schema:
                      type: boolean
                      default: false
                  description: Whether to include reply speeches
                - in: query
                  name: substantive
                  schema:
                      type: boolean
                      default: true
                  description: Whether to include substantive speeches
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - standings
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/PaginatedSpeakerRoundScoresList"
                    description: ""
    /api/v1/tournaments/{tournament_slug}/teams:
        get:
            operationId: api_v1_tournaments_teams_list
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: List teams in tournament
            parameters:
                - name: limit
                  required: false
                  in: query
                  description: Number of results to return per page.
                  schema:
                      type: integer
                - name: offset
                  required: false
                  in: query
                  description: The initial index from which to return the results.
                  schema:
                      type: integer
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - teams
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/PaginatedTeamList"
                    description: ""
        post:
            operationId: api_v1_tournaments_teams_create
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Create team
            parameters:
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - teams
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Team"
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Team"
                    description: ""
    /api/v1/tournaments/{tournament_slug}/teams/{id}:
        get:
            operationId: api_v1_tournaments_teams_retrieve
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Get team
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - teams
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Team"
                    description: ""
        post:
            operationId: api_v1_tournaments_teams_create_2
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Update team
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - teams
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Team"
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Team"
                    description: ""
        patch:
            operationId: api_v1_tournaments_teams_partial_update
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Patch team
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - teams
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/PatchedTeam"
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Team"
                    description: ""
        delete:
            operationId: api_v1_tournaments_teams_destroy
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Delete team
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - teams
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "204":
                    description: No response body
    /api/v1/tournaments/{tournament_slug}/teams/standings:
        get:
            operationId: api_v1_tournaments_teams_standings_list
            description: Get current standings
            summary: Get team standings
            parameters:
                - in: query
                  name: category
                  schema:
                      type: integer
                  description: Only include participants in a category (ID)
                - in: query
                  name: extra_metrics
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - points
                              - wins
                              - speaks_sum
                              - speaks_avg
                              - speaks_ind_avg
                              - speaks_stddev
                              - draw_strength
                              - draw_strength_speaks
                              - margin_sum
                              - margin_avg
                              - npullups
                              - pullup_debates
                              - num_adjs
                              - firsts
                              - seconds
                              - thirds
                              - num_iron
                              - wbw
                  description:
                      Include these unranked metrics for participants; default is tournament
                      settings
                  explode: false
                - name: limit
                  required: false
                  in: query
                  description: Number of results to return per page.
                  schema:
                      type: integer
                - in: query
                  name: metrics
                  schema:
                      type: array
                      items:
                          type: string
                          enum:
                              - points
                              - wins
                              - speaks_sum
                              - speaks_avg
                              - speaks_ind_avg
                              - speaks_stddev
                              - draw_strength
                              - draw_strength_speaks
                              - margin_sum
                              - margin_avg
                              - npullups
                              - pullup_debates
                              - num_adjs
                              - firsts
                              - seconds
                              - thirds
                              - num_iron
                              - wbw
                  description: Rank participants with these metrics; default is tournament settings
                  explode: false
                - name: offset
                  required: false
                  in: query
                  description: The initial index from which to return the results.
                  schema:
                      type: integer
                - in: query
                  name: round
                  schema:
                      type: integer
                  description: Sequence of last round to take into account
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - standings
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/PaginatedTeamStandingsList"
                    description: ""
    /api/v1/tournaments/{tournament_slug}/teams/standings/rounds:
        get:
            operationId: api_v1_tournaments_teams_standings_rounds_list
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Get team scores per round
            parameters:
                - name: limit
                  required: false
                  in: query
                  description: Number of results to return per page.
                  schema:
                      type: integer
                - name: offset
                  required: false
                  in: query
                  description: The initial index from which to return the results.
                  schema:
                      type: integer
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - standings
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/PaginatedTeamRoundScoresList"
                    description: ""
    /api/v1/tournaments/{tournament_slug}/user-groups:
        get:
            operationId: api_v1_tournaments_user_groups_list
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: List all permission groups in tournament
            parameters:
                - name: limit
                  required: false
                  in: query
                  description: Number of results to return per page.
                  schema:
                      type: integer
                - name: offset
                  required: false
                  in: query
                  description: The initial index from which to return the results.
                  schema:
                      type: integer
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - users
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/PaginatedGroupList"
                    description: ""
        post:
            operationId: api_v1_tournaments_user_groups_create
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Create group
            parameters:
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - users
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Group"
                required: true
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Group"
                    description: ""
    /api/v1/tournaments/{tournament_slug}/user-groups/{id}:
        get:
            operationId: api_v1_tournaments_user_groups_retrieve
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Get group
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - users
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Group"
                    description: ""
        post:
            operationId: api_v1_tournaments_user_groups_create_2
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Update group
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - users
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Group"
                required: true
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Group"
                    description: ""
        patch:
            operationId: api_v1_tournaments_user_groups_partial_update
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Patch group
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - users
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/PatchedGroup"
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Group"
                    description: ""
        delete:
            operationId: api_v1_tournaments_user_groups_destroy
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Delete group
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - users
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "204":
                    description: No response body
    /api/v1/tournaments/{tournament_slug}/venue-categories:
        get:
            operationId: api_v1_tournaments_venue_categories_list
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: List tournament venue categories
            parameters:
                - name: limit
                  required: false
                  in: query
                  description: Number of results to return per page.
                  schema:
                      type: integer
                - name: offset
                  required: false
                  in: query
                  description: The initial index from which to return the results.
                  schema:
                      type: integer
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - venues
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/PaginatedVenueCategoryList"
                    description: ""
        post:
            operationId: api_v1_tournaments_venue_categories_create
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Create venue category
            parameters:
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - venues
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/VenueCategory"
                required: true
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/VenueCategory"
                    description: ""
    /api/v1/tournaments/{tournament_slug}/venue-categories/{id}:
        get:
            operationId: api_v1_tournaments_venue_categories_retrieve
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Get venue category
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - venues
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/VenueCategory"
                    description: ""
        post:
            operationId: api_v1_tournaments_venue_categories_create_2
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Update venue category
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - venues
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/VenueCategory"
                required: true
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/VenueCategory"
                    description: ""
        patch:
            operationId: api_v1_tournaments_venue_categories_partial_update
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Patch venue category
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - venues
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/PatchedVenueCategory"
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/VenueCategory"
                    description: ""
        delete:
            operationId: api_v1_tournaments_venue_categories_destroy
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Delete venue category
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - venues
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "204":
                    description: No response body
    /api/v1/tournaments/{tournament_slug}/venues:
        get:
            operationId: api_v1_tournaments_venues_list
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: List rooms in tournament
            parameters:
                - name: limit
                  required: false
                  in: query
                  description: Number of results to return per page.
                  schema:
                      type: integer
                - name: offset
                  required: false
                  in: query
                  description: The initial index from which to return the results.
                  schema:
                      type: integer
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - venues
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/PaginatedVenueList"
                    description: ""
        post:
            operationId: api_v1_tournaments_venues_create
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Create room
            parameters:
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - venues
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Venue"
                required: true
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Venue"
                    description: ""
    /api/v1/tournaments/{tournament_slug}/venues/{id}:
        get:
            operationId: api_v1_tournaments_venues_retrieve
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Get room
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - venues
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Venue"
                    description: ""
        post:
            operationId: api_v1_tournaments_venues_create_2
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Update room
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - venues
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Venue"
                required: true
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Venue"
                    description: ""
        patch:
            operationId: api_v1_tournaments_venues_partial_update
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Patch room
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - venues
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/PatchedVenue"
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Venue"
                    description: ""
        delete:
            operationId: api_v1_tournaments_venues_destroy
            description: |-
                Mixin for views that log an action in the action log when a form is
                successfully submitted.

                Views using this mixin should specify an `action_log_type` and, if
                applicable, an `action_log_content_object_attr`. The mixin will add an
                `ActionLogEntry` instance when the form is successfully submitted.

                This mixin is best used with views that also derive from `FormMixin`
                somehow. For forms that don't, they can call `self.log_action()` explicitly.
            summary: Delete room
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - venues
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "204":
                    description: No response body
    /api/v1/tournaments/{tournament_slug}/venues/{id}/checkin:
        get:
            operationId: api_v1_tournaments_venues_checkin_retrieve
            description: Get checkin status
            summary: Get room checkin status
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - venues
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Checkin"
                    description: ""
        post:
            operationId: api_v1_tournaments_venues_checkin_create
            description: Creates an identifier
            summary: Create room checkin identifier
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - venues
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Checkin"
                    description: ""
        put:
            operationId: api_v1_tournaments_venues_checkin_update
            description: Checks in
            summary: Check in room
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - venues
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Checkin"
                    description: ""
        patch:
            operationId: api_v1_tournaments_venues_checkin_partial_update
            description: Toggles the check-in status
            summary: Toggle room checkin status
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - venues
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Checkin"
                    description: ""
        delete:
            operationId: api_v1_tournaments_venues_checkin_destroy
            description: Checks out
            summary: Check out room
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
                - in: path
                  name: tournament_slug
                  schema:
                      type: string
                  description: The tournament's slug
                  required: true
            tags:
                - venues
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Checkin"
                    description: ""
    /api/v1/users:
        get:
            operationId: api_v1_users_list
            summary: List all users
            parameters:
                - name: limit
                  required: false
                  in: query
                  description: Number of results to return per page.
                  schema:
                      type: integer
                - name: offset
                  required: false
                  in: query
                  description: The initial index from which to return the results.
                  schema:
                      type: integer
            tags:
                - users
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/PaginatedUserList"
                    description: ""
        post:
            operationId: api_v1_users_create
            summary: Create user
            tags:
                - users
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/User"
                required: true
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/User"
                    description: ""
    /api/v1/users/{id}:
        get:
            operationId: api_v1_users_retrieve
            summary: Get user
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
            tags:
                - users
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/User"
                    description: ""
        post:
            operationId: api_v1_users_create_2
            summary: Update user
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
            tags:
                - users
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/User"
                required: true
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/User"
                    description: ""
        patch:
            operationId: api_v1_users_partial_update
            summary: Patch user
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
            tags:
                - users
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/PatchedUser"
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/User"
                    description: ""
        delete:
            operationId: api_v1_users_destroy
            summary: Deactivate user
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  description: The object's primary key
                  required: true
            tags:
                - users
            security:
                - tokenAuth: []
                - cookieAuth: []
            responses:
                "204":
                    description: No response body
components:
    schemas:
        Adjudicator:
            type: object
            properties:
                id:
                    type: integer
                    readOnly: true
                url:
                    type: string
                    format: uri
                    readOnly: true
                name:
                    type: string
                institution:
                    type: string
                    format: uri
                    nullable: true
                institution_conflicts:
                    type: array
                    items:
                        type: string
                        format: uri
                team_conflicts:
                    type: array
                    items:
                        type: string
                        format: uri
                adjudicator_conflicts:
                    type: array
                    items:
                        type: string
                        format: uri
                venue_constraints:
                    type: array
                    items:
                        $ref: "#/components/schemas/VenueConstraint"
                _links:
                    allOf:
                        - $ref: "#/components/schemas/AdjudicatorLinks"
                    readOnly: true
                    title: " links"
                barcode:
                    type: string
                    readOnly: true
                email:
                    type: string
                    format: email
                    nullable: true
                    title: Email address
                    maxLength: 254
                phone:
                    type: string
                    maxLength: 40
                anonymous:
                    type: boolean
                    description:
                        Anonymous persons will have their name and team redacted on
                        public tab releases
                code_name:
                    type: string
                    description: Name used to obscure real name on public-facing pages
                    maxLength: 25
                url_key:
                    type: string
                    nullable: true
                    maxLength: 24
                    pattern: ^[-a-zA-Z0-9_]+$
                gender:
                    description: |-
                        Gender is displayed in the adjudicator allocation interface, and nowhere else

                        * `M` - male
                        * `F` - female
                        * `O` - other
                    oneOf:
                        - $ref: "#/components/schemas/GenderEnum"
                        - $ref: "#/components/schemas/BlankEnum"
                pronoun:
                    type: string
                    description:
                        If printing ballots using Tabbycat, there is the option to
                        pre-print pronouns
                    maxLength: 10
                base_score:
                    type: number
                    format: double
                trainee:
                    type: boolean
                    title: Always trainee
                    description:
                        If checked, this adjudicator will never be auto-allocated a
                        voting position, regardless of their score
                breaking:
                    type: boolean
                independent:
                    type: boolean
                adj_core:
                    type: boolean
                    title: Adjudication core
            required:
                - _links
                - adjudicator_conflicts
                - barcode
                - id
                - institution
                - institution_conflicts
                - name
                - team_conflicts
                - url
        AdjudicatorLinks:
            type: object
            properties:
                checkin:
                    type: string
                    format: uri
                    readOnly: true
            required:
                - checkin
        AnswerTypeEnum:
            enum:
                - bc
                - bs
                - i
                - is
                - f
                - t
                - tl
                - ss
                - ms
            type: string
            description: |-
                * `bc` - checkbox
                * `bs` - yes/no (dropdown)
                * `i` - integer (textbox)
                * `is` - integer scale
                * `f` - float
                * `t` - text
                * `tl` - long text
                * `ss` - select one
                * `ms` - select multiple
        Ballot:
            type: object
            description: |-
                Mixin that provides retrieval of appropriate fields for the Submission
                instance, used with forms that are submitted by tabroom officials. It is up
                to subclasses to use get_submitter_fields() appropriately.
            properties:
                id:
                    type: integer
                    readOnly: true
                result:
                    $ref: "#/components/schemas/Result"
                motion:
                    type: string
                    format: uri
                url:
                    type: string
                    format: uri
                    readOnly: true
                participant_submitter:
                    type: string
                    format: uri
                    nullable: true
                vetos:
                    type: array
                    items:
                        $ref: "#/components/schemas/Veto"
                    nullable: true
                timestamp:
                    type: string
                    format: date-time
                    readOnly: true
                version:
                    type: integer
                    readOnly: true
                submitter_type:
                    allOf:
                        - $ref: "#/components/schemas/SubmitterTypeEnum"
                    readOnly: true
                confirmed:
                    type: boolean
                private_url:
                    type: boolean
                    readOnly: true
                    title: From private URL
                confirm_timestamp:
                    type: string
                    format: date-time
                    readOnly: true
                    nullable: true
                ip_address:
                    type: string
                    readOnly: true
                    nullable: true
                discarded:
                    type: boolean
                single_adj:
                    type: boolean
                    title: Single adjudicator
                    description:
                        Whether this submission represents only the submitting adjudicator
                        on a panel, when individual adjudicator ballots are enabled.
                submitter:
                    type: integer
                    readOnly: true
                    nullable: true
                confirmer:
                    type: integer
                    readOnly: true
                    nullable: true
            required:
                - confirm_timestamp
                - confirmer
                - id
                - ip_address
                - private_url
                - result
                - submitter
                - submitter_type
                - timestamp
                - url
                - version
        BlankEnum:
            enum:
                - ""
        BreakCategory:
            type: object
            properties:
                id:
                    type: integer
                    readOnly: true
                url:
                    type: string
                    format: uri
                    readOnly: true
                _links:
                    allOf:
                        - $ref: "#/components/schemas/BreakCategoryLinks"
                    readOnly: true
                    title: " links"
                name:
                    type: string
                    description: Name to be displayed, e.g., "ESL"
                    maxLength: 50
                slug:
                    type: string
                    description: Slug for URLs, e.g., "esl"
                    maxLength: 50
                    pattern: ^[-a-zA-Z0-9_]+$
                seq:
                    type: integer
                    maximum: 2147483647
                    minimum: -2147483648
                    title: Sequence number
                    description: The order in which the categories are displayed
                break_size:
                    type: integer
                    maximum: 2147483647
                    minimum: 2
                    description: Number of breaking teams in this category
                is_general:
                    type: boolean
                    description: Are teams eligible for this break by default
                priority:
                    type: integer
                    maximum: 2147483647
                    minimum: -2147483648
                    description:
                        If a team breaks in multiple categories, higher priority numbers
                        take precedence; teams can break into multiple categories if and only
                        if they all have the same priority
                limit:
                    type: integer
                    maximum: 2147483647
                    minimum: -2147483648
                    description:
                        At most this many teams will be shown on the public tab for
                        this category, or use 0 for no limit
                rule:
                    allOf:
                        - $ref: "#/components/schemas/RuleEnum"
                    description: |-
                        Rule for how the break is calculated (most tournaments should use "Standard")

                        * `standard` - Standard
                        * `aida-1996` - AIDA 1996
                        * `aida-2016-easters` - AIDA 2016 (Easters)
                        * `aida-2016-australs` - AIDA 2016 (Australs)
                        * `aida-2019-australs-open` - AIDA 2019 (Australs, Dynamic Cap)
            required:
                - _links
                - break_size
                - id
                - is_general
                - name
                - priority
                - seq
                - slug
                - url
        BreakCategoryLinks:
            type: object
            properties:
                eligibility:
                    type: string
                    format: uri
                    readOnly: true
                breaking_teams:
                    type: string
                    format: uri
                    readOnly: true
            required:
                - breaking_teams
                - eligibility
        BreakEligibility:
            type: object
            properties:
                slug:
                    type: string
                    readOnly: true
                    description: Slug for URLs, e.g., "esl"
                    pattern: ^[-a-zA-Z0-9_]+$
                team_set:
                    type: array
                    items:
                        type: string
                        format: uri
            required:
                - slug
                - team_set
        BreakingTeam:
            type: object
            properties:
                team:
                    type: string
                    format: uri
                rank:
                    type: integer
                    maximum: 2147483647
                    minimum: -2147483648
                break_rank:
                    type: integer
                    maximum: 2147483647
                    minimum: -2147483648
                    nullable: true
                remark:
                    nullable: true
                    description: |-
                        Used to explain why an otherwise-qualified team didn't break

                        * `C` - Capped
                        * `I` - Ineligible
                        * `D` - Different break
                        * `d` - Disqualified
                        * `t` - Lost coin toss
                        * `w` - Withdrawn
                    oneOf:
                        - $ref: "#/components/schemas/RemarkEnum"
                        - $ref: "#/components/schemas/BlankEnum"
                        - $ref: "#/components/schemas/NullEnum"
            required:
                - rank
                - team
        Checkin:
            type: object
            properties:
                object:
                    type: string
                    format: uri
                    readOnly: true
                barcode:
                    type: string
                checked:
                    type: boolean
                timestamp:
                    type: string
                    format: date-time
            required:
                - barcode
                - checked
                - object
                - timestamp
        Criteria:
            type: object
            properties:
                criterion:
                    type: string
                    format: uri
                score:
                    type: number
                    format: double
            required:
                - criterion
                - score
        DebateAdjudicator:
            type: object
            properties:
                chair:
                    type: string
                    format: uri
                panellists:
                    type: array
                    items:
                        type: string
                        format: uri
                trainees:
                    type: array
                    items:
                        type: string
                        format: uri
            required:
                - chair
                - panellists
                - trainees
        DebateTeam:
            type: object
            properties:
                team:
                    type: string
                    format: uri
                side:
                    anyOf:
                        - type: number
                        - type: string
                          enum:
                              - aff
                              - neg
                              - cg
                              - co
                              - bye
            required:
                - team
        DisplayInVenueNameEnum:
            enum:
                - "-"
                - P
                - S
            type: string
            description: |-
                * `-` - Don't display in room name
                * `P` - Display as prefix
                * `S` - Display as suffix
        DrawStatusEnum:
            enum:
                - N
                - D
                - C
                - R
            type: string
            description: |-
                * `N` - None
                * `D` - Draft
                * `C` - Confirmed
                * `R` - Released
        DrawTypeEnum:
            enum:
                - R
                - M
                - D
                - P
                - E
                - S
            type: string
            description: |-
                * `R` - Random
                * `M` - Manual
                * `D` - Round-robin
                * `P` - Power-paired
                * `E` - Elimination
                * `S` - Seeded
        EmojiEnum:
            enum:
                - ☺️
                - ☹
                - ☝️
                - ✌️
                - ✍
                - ❤️
                - ❣
                - ☠
                - ♨️
                - ✈️
                - ⌛
                - ⌚
                - ♈
                - ♉
                - ♊
                - ♋
                - ♌
                - ♍
                - ♎
                - ♏
                - ♐
                - ♑
                - ♒
                - ♓
                - ☀️
                - ☁️
                - ☂
                - ❄️
                - ☃
                - ☄️
                - ♠️
                - ♥️
                - ♦️
                - ♣️
                - ▶️
                - ◀️
                - ☎️
                - ⌨
                - ✉️
                - ✏️
                - ✒️
                - ✂️
                - ↗️
                - ➡️
                - ↘️
                - ↙️
                - ↖️
                - ↕️
                - ↔️
                - ↩️
                - ↪️
                - ✡
                - ☸
                - ☯
                - ✝
                - ☦
                - ☪
                - ☮
                - ☢
                - ☣
                - ☑️
                - ✔️
                - ✖️
                - ✳️
                - ✴️
                - ❇️
                - ‼️
                - 〰️
                - ©️
                - ®️
                - ™️
                - Ⓜ️
                - ㊗️
                - ㊙️
                - ▪️
                - ▫️
                - "#⃣️"
                - "*⃣"
                - 0⃣️
                - 1⃣️
                - 2⃣️
                - 3⃣️
                - 4⃣️
                - 5⃣️
                - 6⃣️
                - 7⃣️
                - 8⃣️
                - 9⃣️
                - ⁉️
                - ℹ️
                - ⤴️
                - ⤵️
                - ♻️
                - 〽️
                - ◻️
                - ◼️
                - ◽
                - ◾
                - ☕
                - ⚠️
                - ☔
                - ⏏
                - ⬆️
                - ⬇️
                - ⬅️
                - ⚡
                - ☘
                - ⚓
                - ♿
                - ⚒
                - ⚙
                - ⚗
                - ⚖
                - ⚔
                - ⚰
                - ⚱
                - ⚜
                - ⚛
                - ⚪
                - ⚫
                - 🀄
                - ⭐
                - ⬛
                - ⬜
                - ⛑
                - ⛰
                - ⛪
                - ⛲
                - ⛺
                - ⛽
                - ⛵
                - ⛴
                - ⛔
                - ⛅
                - ⛈
                - ⛱
                - ⛄
                - ⚽
                - ⚾
                - ⛳
                - ⛸
                - ⛷
                - ⛹
                - ⛏
                - ⛓
                - ⛩
                - ⭕
                - ❗
                - 🅿️
                - 🈯
                - 🈚
                - 😁
                - 😂
                - 😃
                - 😄
                - 😅
                - 😆
                - 😉
                - 😊
                - 😋
                - 😎
                - 😍
                - 😘
                - 😚
                - 😇
                - 😐
                - 😶
                - 😏
                - 😣
                - 😥
                - 😪
                - 😫
                - 😌
                - 😜
                - 😝
                - 😒
                - 😓
                - 😔
                - 😖
                - 😷
                - 😲
                - 😞
                - 😤
                - 😢
                - 😭
                - 😨
                - 😩
                - 😰
                - 😱
                - 😳
                - 😵
                - 😡
                - 😠
                - 👿
                - 😈
                - 👦
                - 👧
                - 👨
                - 👩
                - 👴
                - 👵
                - 👶
                - 👱
                - 👮
                - 👲
                - 👳
                - 👷
                - 👸
                - 💂
                - 🎅
                - 👼
                - 👯
                - 💆
                - 💇
                - 👰
                - 🙍
                - 🙎
                - 🙅
                - 🙆
                - 💁
                - 🙋
                - 🙇
                - 🙌
                - 🙏
                - 👤
                - 👥
                - 🚶
                - 🏃
                - 💃
                - 💏
                - 💑
                - 👪
                - 👫
                - 👬
                - 👭
                - 💪
                - 👈
                - 👉
                - 👆
                - 👇
                - ✊
                - ✋
                - 👊
                - 👌
                - 👍
                - 👎
                - 👋
                - 👏
                - 👐
                - 💅
                - 👣
                - 👀
                - 👂
                - 👃
                - 👅
                - 👄
                - 💋
                - 💘
                - 💓
                - 💔
                - 💕
                - 💖
                - 💗
                - 💙
                - 💚
                - 💛
                - 💜
                - 💝
                - 💞
                - 💟
                - 💌
                - 💧
                - 💤
                - 💢
                - 💣
                - 💥
                - 💦
                - 💨
                - 💫
                - 💬
                - 💭
                - 👓
                - 👔
                - 👕
                - 👖
                - 👗
                - 👘
                - 👙
                - 👚
                - 👛
                - 👜
                - 👝
                - 🎒
                - 👞
                - 👟
                - 👠
                - 👡
                - 👢
                - 👑
                - 👒
                - 🎩
                - 💄
                - 💍
                - 💎
                - 👹
                - 👺
                - 👻
                - 💀
                - 👽
                - 👾
                - 💩
                - 🐵
                - 🙈
                - 🙉
                - 🙊
                - 🐒
                - 🐶
                - 🐕
                - 🐩
                - 🐺
                - 🐱
                - 😸
                - 😹
                - 😺
                - 😻
                - 😼
                - 😽
                - 😾
                - 😿
                - 🙀
                - 🐈
                - 🐯
                - 🐅
                - 🐆
                - 🐴
                - 🐎
                - 🐮
                - 🐂
                - 🐃
                - 🐄
                - 🐷
                - 🐖
                - 🐗
                - 🐽
                - 🐏
                - 🐑
                - 🐐
                - 🐪
                - 🐫
                - 🐘
                - 🐭
                - 🐁
                - 🐀
                - 🐹
                - 🐰
                - 🐇
                - 🐻
                - 🐨
                - 🐼
                - 🐾
                - 🐔
                - 🐓
                - 🐣
                - 🐤
                - 🐥
                - 🐦
                - 🐧
                - 🐸
                - 🐊
                - 🐢
                - 🐍
                - 🐲
                - 🐉
                - 🐳
                - 🐋
                - 🐬
                - 🐟
                - 🐠
                - 🐡
                - 🐙
                - 🐚
                - 🐌
                - 🐛
                - 🐜
                - 🐝
                - 🐞
                - 💐
                - 🌸
                - 💮
                - 🌹
                - 🌺
                - 🌻
                - 🌼
                - 🌷
                - 🌱
                - 🌲
                - 🌳
                - 🌴
                - 🌵
                - 🌾
                - 🌿
                - 🍀
                - 🍁
                - 🍂
                - 🍃
                - 🍇
                - 🍈
                - 🍉
                - 🍊
                - 🍋
                - 🍌
                - 🍍
                - 🍎
                - 🍏
                - 🍐
                - 🍑
                - 🍒
                - 🍓
                - 🍅
                - 🍆
                - 🌽
                - 🍄
                - 🌰
                - 🍞
                - 🍖
                - 🍗
                - 🍔
                - 🍟
                - 🍕
                - 🍲
                - 🍱
                - 🍘
                - 🍙
                - 🍚
                - 🍛
                - 🍜
                - 🍝
                - 🍠
                - 🍢
                - 🍣
                - 🍤
                - 🍥
                - 🍡
                - 🍦
                - 🍧
                - 🍨
                - 🍩
                - 🍪
                - 🎂
                - 🍰
                - 🍫
                - 🍬
                - 🍭
                - 🍮
                - 🍯
                - 🍼
                - 🍵
                - 🍶
                - 🍷
                - 🍸
                - 🍹
                - 🍺
                - 🍻
                - 🍴
                - 🍳
                - 🌍
                - 🌎
                - 🌏
                - 🌐
                - 🌋
                - 🗻
                - 🏠
                - 🏡
                - 🏢
                - 🏣
                - 🏤
                - 🏥
                - 🏦
                - 🏨
                - 🏩
                - 🏪
                - 🏫
                - 🏬
                - 🏭
                - 🏯
                - 🏰
                - 💒
                - 🗼
                - 🗽
                - 🗾
                - 🌁
                - 🌃
                - 🌄
                - 🌅
                - 🌆
                - 🌇
                - 🌉
                - 🌊
                - 🗿
                - 🌌
                - 🎠
                - 🎡
                - 🎢
                - 💈
                - 🎪
                - 🎭
                - 🎨
                - 🎰
                - 🚂
                - 🚃
                - 🚄
                - 🚅
                - 🚆
                - 🚇
                - 🚈
                - 🚉
                - 🚊
                - 🚝
                - 🚞
                - 🚋
                - 🚌
                - 🚍
                - 🚎
                - 🚏
                - 🚐
                - 🚑
                - 🚒
                - 🚓
                - 🚔
                - 🚕
                - 🚖
                - 🚗
                - 🚘
                - 🚙
                - 🚚
                - 🚛
                - 🚜
                - 🚲
                - 🚳
                - 🚨
                - 🔱
                - 🚣
                - 🚤
                - 🚢
                - 💺
                - 🚁
                - 🚟
                - 🚠
                - 🚡
                - 🚀
                - 🏧
                - 🚮
                - 🚥
                - 🚦
                - 🚧
                - 🚫
                - 🚭
                - 🚯
                - 🚰
                - 🚱
                - 🚷
                - 🚸
                - 🚹
                - 🚺
                - 🚻
                - 🚼
                - 🚾
                - 🛂
                - 🛃
                - 🛄
                - 🛅
                - 🚪
                - 🚽
                - 🚿
                - 🛀
                - 🛁
                - ⏳
                - ⏰
                - ⏱
                - ⏲
                - 🕛
                - 🕧
                - 🕐
                - 🕜
                - 🕑
                - 🕝
                - 🕒
                - 🕞
                - 🕓
                - 🕟
                - 🕔
                - 🕠
                - 🕕
                - 🕡
                - 🕖
                - 🕢
                - 🕗
                - 🕣
                - 🕘
                - 🕤
                - 🕙
                - 🕥
                - 🕚
                - 🕦
                - ⛎
                - 🌑
                - 🌒
                - 🌓
                - 🌔
                - 🌕
                - 🌖
                - 🌗
                - 🌘
                - 🌙
                - 🌚
                - 🌛
                - 🌜
                - 🌝
                - 🌞
                - 🌀
                - 🌈
                - 🌂
                - 🌟
                - 🌠
                - 🔥
                - 🎃
                - 🎄
                - 🎆
                - 🎇
                - ✨
                - 🎈
                - 🎉
                - 🎊
                - 🎋
                - 🎌
                - 🎍
                - 🎎
                - 🎏
                - 🎐
                - 🎑
                - 🎓
                - 🎯
                - 🎴
                - 🎀
                - 🎁
                - 🎫
                - 🏀
                - 🏈
                - 🏉
                - 🎾
                - 🎱
                - 🎳
                - 🎣
                - 🎽
                - 🎿
                - 🏂
                - 🏄
                - 🏇
                - 🏊
                - 🚴
                - 🚵
                - 🏆
                - 🎮
                - 🎲
                - 🃏
                - 🔇
                - 🔈
                - 🔉
                - 🔊
                - 📢
                - 📣
                - 📯
                - 🔔
                - 🔕
                - 🔀
                - 🔁
                - 🔂
                - ⏩
                - ⏭
                - ⏯
                - ⏪
                - ⏮
                - 🔼
                - ⏫
                - 🔽
                - ⏬
                - 🎼
                - 🎵
                - 🎶
                - 🎤
                - 🎧
                - 🎷
                - 🎸
                - 🎹
                - 🎺
                - 🎻
                - 📻
                - 📱
                - 📳
                - 📴
                - 📲
                - 📵
                - 📞
                - 🔟
                - 📶
                - 📟
                - 📠
                - 🔋
                - 🔌
                - 💻
                - 💽
                - 💾
                - 💿
                - 📀
                - 🎥
                - 🎦
                - 🎬
                - 📺
                - 📷
                - 📹
                - 📼
                - 🔅
                - 🔆
                - 🔍
                - 🔎
                - 🔬
                - 🔭
                - 📡
                - 💡
                - 🔦
                - 🏮
                - 📔
                - 📕
                - 📖
                - 📗
                - 📘
                - 📙
                - 📚
                - 📓
                - 📒
                - 📃
                - 📜
                - 📄
                - 📰
                - 📑
                - 🔖
                - 💰
                - 💴
                - 💵
                - 💶
                - 💷
                - 💸
                - 💱
                - 💲
                - 💳
                - 💹
                - 📧
                - 📨
                - 📩
                - 📤
                - 📥
                - 📦
                - 📫
                - 📪
                - 📬
                - 📭
                - 📮
                - 📝
                - 💼
                - 📁
                - 📂
                - 📅
                - 📆
                - 📇
                - 📈
                - 📉
                - 📊
                - 📋
                - 📌
                - 📍
                - 📎
                - 📏
                - 📐
                - 📛
                - 🔒
                - 🔓
                - 🔏
                - 🔐
                - 🔑
                - 🔨
                - 🔧
                - 🔩
                - 🔗
                - 💉
                - 💊
                - 🔪
                - 🔫
                - 🚬
                - 🏁
                - 🚩
                - 🇦🇫
                - 🇦🇽
                - 🇦🇱
                - 🇩🇿
                - 🇦🇸
                - 🇦🇩
                - 🇦🇴
                - 🇦🇮
                - 🇦🇶
                - 🇦🇬
                - 🇦🇷
                - 🇦🇲
                - 🇦🇼
                - 🇦🇨
                - 🇦🇺
                - 🇦🇹
                - 🇦🇿
                - 🇧🇸
                - 🇧🇭
                - 🇧🇩
                - 🇧🇧
                - 🇧🇾
                - 🇧🇪
                - 🇧🇿
                - 🇧🇯
                - 🇧🇲
                - 🇧🇹
                - 🇧🇴
                - 🇧🇦
                - 🇧🇼
                - 🇧🇻
                - 🇧🇷
                - 🇮🇴
                - 🇻🇬
                - 🇧🇳
                - 🇧🇬
                - 🇧🇫
                - 🇧🇮
                - 🇰🇭
                - 🇨🇲
                - 🇨🇦
                - 🇮🇨
                - 🇨🇻
                - 🇧🇶
                - 🇰🇾
                - 🇨🇫
                - 🇪🇦
                - 🇹🇩
                - 🇨🇱
                - 🇨🇳
                - 🇨🇽
                - 🇨🇵
                - 🇨🇨
                - 🇨🇴
                - 🇰🇲
                - 🇨🇬
                - 🇨🇩
                - 🇨🇰
                - 🇨🇷
                - 🇨🇮
                - 🇭🇷
                - 🇨🇺
                - 🇨🇼
                - 🇨🇾
                - 🇨🇿
                - 🇩🇰
                - 🇩🇬
                - 🇩🇯
                - 🇩🇲
                - 🇩🇴
                - 🇪🇨
                - 🇪🇬
                - 🇸🇻
                - 🇬🇶
                - 🇪🇷
                - 🇪🇪
                - 🇪🇹
                - 🇪🇺
                - 🇫🇰
                - 🇫🇴
                - 🇫🇯
                - 🇫🇮
                - 🇫🇷
                - 🇬🇫
                - 🇵🇫
                - 🇹🇫
                - 🇬🇦
                - 🇬🇲
                - 🇬🇪
                - 🇩🇪
                - 🇬🇭
                - 🇬🇮
                - 🇬🇷
                - 🇬🇱
                - 🇬🇩
                - 🇬🇵
                - 🇬🇺
                - 🇬🇹
                - 🇬🇬
                - 🇬🇳
                - 🇬🇼
                - 🇬🇾
                - 🇭🇹
                - 🇭🇲
                - 🇭🇳
                - 🇭🇰
                - 🇭🇺
                - 🇮🇸
                - 🇮🇳
                - 🇮🇩
                - 🇮🇷
                - 🇮🇶
                - 🇮🇪
                - 🇮🇲
                - 🇮🇱
                - 🇮🇹
                - 🇯🇲
                - 🇯🇵
                - 🇯🇪
                - 🇯🇴
                - 🇰🇿
                - 🇰🇪
                - 🇰🇮
                - 🇽🇰
                - 🇰🇼
                - 🇰🇬
                - 🇱🇦
                - 🇱🇻
                - 🇱🇧
                - 🇱🇸
                - 🇱🇷
                - 🇱🇾
                - 🇱🇮
                - 🇱🇹
                - 🇱🇺
                - 🇲🇴
                - 🇲🇰
                - 🇲🇬
                - 🇲🇼
                - 🇲🇾
                - 🇲🇻
                - 🇲🇱
                - 🇲🇹
                - 🇲🇭
                - 🇲🇶
                - 🇲🇷
                - 🇲🇺
                - 🇾🇹
                - 🇲🇽
                - 🇫🇲
                - 🇲🇩
                - 🇲🇨
                - 🇲🇳
                - 🇲🇪
                - 🇲🇸
                - 🇲🇦
                - 🇲🇿
                - 🇲🇲
                - 🇳🇦
                - 🇳🇷
                - 🇳🇵
                - 🇳🇱
                - 🇳🇨
                - 🇳🇿
                - 🇳🇮
                - 🇳🇪
                - 🇳🇬
                - 🇳🇺
                - 🇳🇫
                - 🇲🇵
                - 🇰🇵
                - 🇳🇴
                - 🇴🇲
                - 🇵🇰
                - 🇵🇼
                - 🇵🇸
                - 🇵🇦
                - 🇵🇬
                - 🇵🇾
                - 🇵🇪
                - 🇵🇭
                - 🇵🇳
                - 🇵🇱
                - 🇵🇹
                - 🇵🇷
                - 🇶🇦
                - 🇷🇪
                - 🇷🇴
                - 🇷🇺
                - 🇷🇼
                - 🇼🇸
                - 🇸🇲
                - 🇸🇹
                - 🇸🇦
                - 🇸🇳
                - 🇷🇸
                - 🇸🇨
                - 🇸🇱
                - 🇸🇬
                - 🇸🇽
                - 🇸🇰
                - 🇸🇮
                - 🇸🇧
                - 🇸🇴
                - 🇿🇦
                - 🇬🇸
                - 🇰🇷
                - 🇸🇸
                - 🇪🇸
                - 🇱🇰
                - 🇧🇱
                - 🇸🇭
                - 🇰🇳
                - 🇱🇨
                - 🇲🇫
                - 🇵🇲
                - 🇻🇨
                - 🇸🇩
                - 🇸🇷
                - 🇸🇯
                - 🇸🇿
                - 🇸🇪
                - 🇨🇭
                - 🇸🇾
                - 🇹🇼
                - 🇹🇯
                - 🇹🇿
                - 🇹🇭
                - 🇹🇱
                - 🇹🇬
                - 🇹🇰
                - 🇹🇴
                - 🇹🇹
                - 🇹🇦
                - 🇹🇳
                - 🇹🇷
                - 🇹🇲
                - 🇹🇨
                - 🇹🇻
                - 🇺🇬
                - 🇺🇦
                - 🇦🇪
                - 🇬🇧
                - 🇺🇸
                - 🇺🇾
                - 🇺🇲
                - 🇻🇮
                - 🇺🇿
                - 🇻🇺
                - 🇻🇦
                - 🇻🇪
                - 🇻🇳
                - 🇼🇫
                - 🇪🇭
                - 🇾🇪
                - 🇿🇲
                - 🇿🇼
                - 🔃
                - 🔄
                - 🔙
                - 🔚
                - 🔛
                - 🔜
                - 🔝
                - 🔰
                - 🔮
                - 🔯
                - ✅
                - ❌
                - ❎
                - ➕
                - ➖
                - ➗
                - ➰
                - ➿
                - ❓
                - ❔
                - ❕
                - 💯
                - 🔞
                - 🔠
                - 🔡
                - 🔢
                - 🔣
                - 🔤
                - 🅰️
                - 🆎
                - 🅱️
                - 🆑
                - 🆒
                - 🆓
                - 🆔
                - 🆕
                - 🆖
                - 🅾️
                - 🆗
                - 🆘
                - 🆙
                - 🆚
                - 🈁
                - 🈂️
                - 🈷️
                - 🈶
                - 🉐
                - 🈹
                - 🈲
                - 🉑
                - 🈸
                - 🈴
                - 🈳
                - 🈺
                - 🈵
                - 🔶
                - 🔷
                - 🔸
                - 🔹
                - 🔺
                - 🔻
                - 💠
                - 🔘
                - 🔲
                - 🔳
                - 🔴
                - 🔵
                - 😀
                - 😗
                - 😙
                - 😑
                - 😮
                - 😯
                - 😴
                - 😛
                - 😕
                - 😟
                - 😦
                - 😧
                - 😬
                - 🙂
                - 🙁
                - 🕵
                - 🗣
                - 🕴
                - 🖕
                - 🖖
                - 🖐
                - 👁
                - 🕳
                - 🗯
                - 🕶
                - 🛍
                - 🐿
                - 🕊
                - 🕷
                - 🕸
                - 🏵
                - 🌶
                - 🍽
                - 🗺
                - 🏔
                - 🏕
                - 🏖
                - 🏜
                - 🏝
                - 🏞
                - 🏟
                - 🏛
                - 🏗
                - 🏘
                - 🏙
                - 🏚
                - 🖼
                - 🛢
                - 🛣
                - 🛤
                - 🛳
                - 🛥
                - 🛩
                - 🛫
                - 🛬
                - 🛰
                - 🛎
                - 🛌
                - 🛏
                - 🛋
                - 🕰
                - 🌡
                - 🌤
                - 🌥
                - 🌦
                - 🌧
                - 🌨
                - 🌩
                - 🌪
                - 🌫
                - 🌬
                - 🎖
                - 🎗
                - 🎞
                - 🎟
                - 🏷
                - 🏌
                - 🏋
                - 🏎
                - 🏍
                - 🏅
                - 🕹
                - ⏸
                - ⏹
                - ⏺
                - 🎙
                - 🎚
                - 🎛
                - 🖥
                - 🖨
                - 🖱
                - 🖲
                - 📽
                - 📸
                - 🕯
                - 🗞
                - 🗳
                - 🖋
                - 🖊
                - 🖌
                - 🖍
                - 🗂
                - 🗒
                - 🗓
                - 🖇
                - 🗃
                - 🗄
                - 🗑
                - 🗝
                - 🛠
                - 🗜
                - 🗡
                - 🛡
                - 🏳
                - 🏴
                - 🕉
                - 🗨
                - 🤗
                - 🤔
                - 🙄
                - 🤐
                - 🤓
                - 🙃
                - 🤒
                - 🤕
                - 🤑
                - 🏻
                - 🏼
                - 🏽
                - 🏾
                - 🏿
                - 🤘
                - 📿
                - 🤖
                - 🦁
                - 🦄
                - 🦃
                - 🦀
                - 🦂
                - 🧀
                - 🌭
                - 🌮
                - 🌯
                - 🍿
                - 🍾
                - 🏺
                - 🛐
                - 🕋
                - 🕌
                - 🕍
                - 🕎
                - 🏏
                - 🏐
                - 🏑
                - 🏒
                - 🏓
                - 🏸
                - 🏹
                - 🤣
                - 🤤
                - 🤢
                - 🤧
                - 🤠
                - 🤡
                - 🤥
                - 🤴
                - 🤵
                - 🤰
                - 🤶
                - 🤦
                - 🤷
                - 🕺
                - 🤺
                - 🤸
                - 🤼
                - 🤽
                - 🤾
                - 🤹
                - 🤳
                - 🤞
                - 🤙
                - 🤛
                - 🤜
                - 🤚
                - 🤝
                - 🖤
                - 🦍
                - 🦊
                - 🦌
                - 🦏
                - 🦇
                - 🦅
                - 🦆
                - 🦉
                - 🦎
                - 🦈
                - 🦐
                - 🦑
                - 🦋
                - 🥀
                - 🥝
                - 🥑
                - 🥔
                - 🥕
                - 🥒
                - 🥜
                - 🥐
                - 🥖
                - 🥞
                - 🥓
                - 🥙
                - 🥚
                - 🥘
                - 🥗
                - 🥛
                - 🥂
                - 🥃
                - 🥄
                - 🛴
                - 🛵
                - 🛑
                - 🛶
                - 🥇
                - 🥈
                - 🥉
                - 🥊
                - 🥋
                - 🥅
                - 🥁
                - 🛒
                - 🤩
                - 🤨
                - 🤯
                - 🤪
                - 🤬
                - 🤮
                - 🤫
                - 🤭
                - 🧐
                - 🧒
                - 🧑
                - 🧓
                - 🧕
                - 🧔
                - 🤱
                - 🧙
                - 🧚
                - 🧛
                - 🧜
                - 🧝
                - 🧞
                - 🧟
                - 🧖
                - 🧗
                - 🧘
                - 🤟
                - 🤲
                - 🧠
                - 🧡
                - 🧣
                - 🧤
                - 🧥
                - 🧦
                - 🧢
                - 🦓
                - 🦒
                - 🦔
                - 🦕
                - 🦖
                - 🦗
                - 🥥
                - 🥦
                - 🥨
                - 🥩
                - 🥪
                - 🥣
                - 🥫
                - 🥟
                - 🥠
                - 🥡
                - 🥧
                - 🥤
                - 🥢
                - 🛸
                - 🛷
                - 🥌
                - 🥰
                - 🥵
                - 🥶
                - 🥴
                - 🥳
                - 🥺
                - 🦵
                - 🦶
                - 🦷
                - 🦴
                - 🦸
                - 🦹
                - 🦝
                - 🦙
                - 🦛
                - 🦘
                - 🦡
                - 🦢
                - 🦚
                - 🦜
                - 🦟
                - 🦠
                - 🥭
                - 🥬
                - 🥯
                - 🧂
                - 🥮
                - 🦞
                - 🧁
                - 🧭
                - 🧱
                - 🛹
                - 🧳
                - 🧨
                - 🧧
                - 🥎
                - 🥏
                - 🥍
                - 🧿
                - 🧩
                - 🧸
                - 🧵
                - 🧶
                - 🥽
                - 🥼
                - 🥾
                - 🥿
                - 🧮
                - 🧾
                - 🧰
                - 🧲
                - 🧪
                - 🧫
                - 🧬
                - 🧴
                - 🧷
                - 🧹
                - 🧺
                - 🧻
                - 🧼
                - 🧽
                - 🧯
                - 🥱
                - 🤎
                - 🤍
                - 🤏
                - 🦾
                - 🦿
                - 🦻
                - 🧏
                - 🧍
                - 🧎
                - 🦧
                - 🦮
                - 🦥
                - 🦦
                - 🦨
                - 🦩
                - 🧄
                - 🧅
                - 🧇
                - 🧆
                - 🧈
                - 🦪
                - 🧃
                - 🧉
                - 🧊
                - 🛕
                - 🦽
                - 🦼
                - 🛺
                - 🪂
                - 🪐
                - 🤿
                - 🪀
                - 🪁
                - 🦺
                - 🥻
                - 🩱
                - 🩲
                - 🩳
                - 🩰
                - 🪕
                - 🪔
                - 🪓
                - 🦯
                - 🩸
                - 🩹
                - 🩺
                - 🪑
                - 🪒
                - 🟠
                - 🟡
                - 🟢
                - 🟣
                - 🟤
                - 🟥
                - 🟧
                - 🟨
                - 🟩
                - 🟦
                - 🟪
                - 🟫
                - 🥲
                - 🥸
                - 🤌
                - 🫀
                - 🫁
                - 🥷
                - 🫂
                - 🦬
                - 🦣
                - 🦫
                - 🦤
                - 🪶
                - 🦭
                - 🪲
                - 🪳
                - 🪰
                - 🪱
                - 🪴
                - 🫐
                - 🫒
                - 🫑
                - 🫓
                - 🫔
                - 🫕
                - 🫖
                - 🧋
                - 🪨
                - 🪵
                - 🛖
                - 🛻
                - 🛼
                - 🪄
                - 🪅
                - 🪆
                - 🪡
                - 🪢
                - 🩴
                - 🪖
                - 🪗
                - 🪘
                - 🪙
                - 🪃
                - 🪚
                - 🪛
                - 🪝
                - 🪜
                - 🛗
                - 🪞
                - 🪟
                - 🪠
                - 🪤
                - 🪣
                - 🪥
                - 🪦
                - 🪧
                - 😶‍🌫
                - 😮‍💨
                - 😵‍💫
                - ❤‍🔥
                - ❤‍🩹
                - 🧔‍♂
                - 🧔‍♀
                - 🫠
                - 🫢
                - 🫣
                - 🫡
                - 🫥
                - 🫤
                - 🥹
                - 🫱
                - 🫲
                - 🫳
                - 🫴
                - 🫰
                - 🫵
                - 🫶
                - 🫦
                - 🫅
                - 🫃
                - 🫄
                - 🧌
                - 🪸
                - 🪷
                - 🪹
                - 🪺
                - 🫘
                - 🫗
                - 🫙
                - 🛝
                - 🛞
                - 🛟
                - 🪩
                - 🪫
                - 🩼
                - 🩻
                - 🫧
                - 🪬
                - 🪪
                - 🟰
                - 🫨
                - 🩷
                - 🩵
                - 🩶
                - 🫷
                - 🫸
                - 🫎
                - 🫏
                - 🪽
                - 🪿
                - 🪼
                - 🪻
                - 🫚
                - 🫛
                - 🪭
                - 🪮
                - 🪇
                - 🪈
                - 🪯
                - 🛜
                - 🙂‍↔
                - 🙂‍↕
                - 🚶‍➡
                - 🧎‍➡
                - 🏃‍➡
                - 🐦‍🔥
                - 🍋‍🟩
                - 🍄‍🟫
                - ⛓‍💥
            type: string
            description: |-
                * `☺️` - ☺️ White Smiling
                * `☹` - ☹ White Frowning
                * `☝️` - ☝️ White Up Pointing Index
                * `✌️` - ✌️ Victory Hand
                * `✍` - ✍ Writing Hand
                * `❤️` - ❤️ Heavy Black Heart
                * `❣` - ❣ Heart Exclamation Mark
                * `☠` - ☠ Skull and Crossbones
                * `♨️` - ♨️ Hot Springs
                * `✈️` - ✈️ Airplane
                * `⌛` - ⌛ Hourglass
                * `⌚` - ⌚ Watch
                * `♈` - ♈ Aries
                * `♉` - ♉ Taurus
                * `♊` - ♊ Gemini
                * `♋` - ♋ Cancer
                * `♌` - ♌ Leo
                * `♍` - ♍ Virgo
                * `♎` - ♎ Libra
                * `♏` - ♏ Scorpius
                * `♐` - ♐ Sagittarius
                * `♑` - ♑ Capricorn
                * `♒` - ♒ Aquarius
                * `♓` - ♓ Pisces
                * `☀️` - ☀️ Black Sun With Rays
                * `☁️` - ☁️ Cloud
                * `☂` - ☂ Umbrella
                * `❄️` - ❄️ Snowflake
                * `☃` - ☃ Snowman
                * `☄️` - ☄️ Comet
                * `♠️` - ♠️ Spade Suit
                * `♥️` - ♥️ Heart Suit
                * `♦️` - ♦️ Diamond Suit
                * `♣️` - ♣️ Club Suit
                * `▶️` - ▶️ Black Right-Pointing Triangle
                * `◀️` - ◀️ Black Left-Pointing Triangle
                * `☎️` - ☎️ Black Telephone
                * `⌨` - ⌨ Keyboard
                * `✉️` - ✉️ Envelope
                * `✏️` - ✏️ Pencil
                * `✒️` - ✒️ Black Nib
                * `✂️` - ✂️ Scissors
                * `↗️` - ↗️ North East Arrow
                * `➡️` - ➡️ Black Rightwards Arrow
                * `↘️` - ↘️ South East Arrow
                * `↙️` - ↙️ South West Arrow
                * `↖️` - ↖️ North West Arrow
                * `↕️` - ↕️ Up Down Arrow
                * `↔️` - ↔️ Left Right Arrow
                * `↩️` - ↩️ Leftwards Arrow With Hook
                * `↪️` - ↪️ Rightwards Arrow With Hook
                * `✡` - ✡ Star of David
                * `☸` - ☸ Wheel of Dharma
                * `☯` - ☯ Yin Yang
                * `✝` - ✝ Latin Cross
                * `☦` - ☦ Orthodox Cross
                * `☪` - ☪ Star and Crescent
                * `☮` - ☮ Peace Symbol
                * `☢` - ☢ Radioactive Sign
                * `☣` - ☣ Biohazard Sign
                * `☑️` - ☑️ Ballot Box With Check
                * `✔️` - ✔️ Heavy Check Mark
                * `✖️` - ✖️ Heavy Multiplication X
                * `✳️` - ✳️ Eight Spoked Asterisk
                * `✴️` - ✴️ Eight Pointed Black Star
                * `❇️` - ❇️ Sparkle
                * `‼️` - ‼️ Double Exclamation Mark
                * `〰️` - 〰️ Wavy Dash
                * `©️` - ©️ Copyright Sign
                * `®️` - ®️ Registered Sign
                * `™️` - ™️ Trade Mark Sign
                * `Ⓜ️` - Ⓜ️ Capital M
                * `㊗️` - ㊗️ Congratulations
                * `㊙️` - ㊙️ Secret
                * `▪️` - ▪️ Black Square
                * `▫️` - ▫️ White Square
                * `#⃣️` - #⃣️ Keycap Number Sign
                * `*⃣` - *⃣ Keycap Asterisk
                * `0⃣️` - 0⃣️ Keycap Digit Zero
                * `1⃣️` - 1⃣️ Keycap Digit One
                * `2⃣️` - 2⃣️ Keycap Digit Two
                * `3⃣️` - 3⃣️ Keycap Digit Three
                * `4⃣️` - 4⃣️ Keycap Digit Four
                * `5⃣️` - 5⃣️ Keycap Digit Five
                * `6⃣️` - 6⃣️ Keycap Digit Six
                * `7⃣️` - 7⃣️ Keycap Digit Seven
                * `8⃣️` - 8⃣️ Keycap Digit Eight
                * `9⃣️` - 9⃣️ Keycap Digit Nine
                * `⁉️` - ⁉️ Exclamation Question Mark
                * `ℹ️` - ℹ️ Information Source
                * `⤴️` - ⤴️ Right-Curve-Up
                * `⤵️` - ⤵️ Right-Curve-Down
                * `♻️` - ♻️ Recycling
                * `〽️` - 〽️ Part Alternation Mark
                * `◻️` - ◻️ White Medium Square
                * `◼️` - ◼️ Black Medium Square
                * `◽` - ◽ White Medium Small Square
                * `◾` - ◾ Black Medium Small Square
                * `☕` - ☕ Hot Beverage
                * `⚠️` - ⚠️ Warning Sign
                * `☔` - ☔ Umbrella With Rain Drops
                * `⏏` - ⏏ Eject Symbol
                * `⬆️` - ⬆️ Upwards Black Arrow
                * `⬇️` - ⬇️ Downwards Black Arrow
                * `⬅️` - ⬅️ Leftwards Black Arrow
                * `⚡` - ⚡ High Voltage
                * `☘` - ☘ Shamrock
                * `⚓` - ⚓ Anchor
                * `♿` - ♿ Wheelchair Symbol
                * `⚒` - ⚒ Hammer and Pick
                * `⚙` - ⚙ Gear
                * `⚗` - ⚗ Alembic
                * `⚖` - ⚖ Scales
                * `⚔` - ⚔ Crossed Swords
                * `⚰` - ⚰ Coffin
                * `⚱` - ⚱ Funeral Urn
                * `⚜` - ⚜ Fleur-De-Lis
                * `⚛` - ⚛ Atom Symbol
                * `⚪` - ⚪ Medium White Circle
                * `⚫` - ⚫ Medium Black Circle
                * `🀄` - 🀄 Mahjong Tile Red Dragon
                * `⭐` - ⭐ White Medium Star
                * `⬛` - ⬛ Black Square
                * `⬜` - ⬜ White Square
                * `⛑` - ⛑ Rescue Hat
                * `⛰` - ⛰ Mountain
                * `⛪` - ⛪ Church
                * `⛲` - ⛲ Fountain
                * `⛺` - ⛺ Tent
                * `⛽` - ⛽ Fuel Pump
                * `⛵` - ⛵ Sailboat
                * `⛴` - ⛴ Ferry
                * `⛔` - ⛔ No Entry
                * `⛅` - ⛅ Overcast
                * `⛈` - ⛈ Storm
                * `⛱` - ⛱ Umbrella
                * `⛄` - ⛄ Snowman
                * `⚽` - ⚽ Soccer
                * `⚾` - ⚾ Baseball
                * `⛳` - ⛳ Hole in One
                * `⛸` - ⛸ Ice Skate
                * `⛷` - ⛷ Skier
                * `⛹` - ⛹ Person With Ball
                * `⛏` - ⛏ Pick
                * `⛓` - ⛓ Chains
                * `⛩` - ⛩ Shinto Shrine
                * `⭕` - ⭕ Heavy Large Circle
                * `❗` - ❗ Heavy Exclamation Mark
                * `🅿️` - 🅿️ Squared P
                * `🈯` - 🈯 Squared 指 (Finger)
                * `🈚` - 🈚 Squared CJK Unified Ideograph-7121
                * `😁` - 😁 Smiling Eyes
                * `😂` - 😂 Joy Tears
                * `😃` - 😃 Smiling Face With Open Mouth
                * `😄` - 😄 Smiling Face With Open Mouth and Smiling Eyes
                * `😅` - 😅 Cold Sweat
                * `😆` - 😆 Closed Eyes
                * `😉` - 😉 Winky
                * `😊` - 😊 Smiling Eyes
                * `😋` - 😋 Face Savouring Delicious Food
                * `😎` - 😎 Shaded Eyes
                * `😍` - 😍 Heart Eyes
                * `😘` - 😘 Kissy
                * `😚` - 😚 Kissing Face With Closed Eyes
                * `😇` - 😇 Halo
                * `😐` - 😐 Neutral
                * `😶` - 😶 No Mouth
                * `😏` - 😏 Smirking
                * `😣` - 😣 Persevering
                * `😥` - 😥 Disappointed
                * `😪` - 😪 Sleepy
                * `😫` - 😫 Tired
                * `😌` - 😌 Relieved
                * `😜` - 😜 Tongue Out
                * `😝` - 😝 Tongue Out Closed Eyes
                * `😒` - 😒 Unamused
                * `😓` - 😓 Cold Sweat
                * `😔` - 😔 Pensive
                * `😖` - 😖 Confounded
                * `😷` - 😷 Medical Mask
                * `😲` - 😲 Astonished
                * `😞` - 😞 Disappointed
                * `😤` - 😤 Face With Look of Triumph
                * `😢` - 😢 Crying
                * `😭` - 😭 Sobbing
                * `😨` - 😨 Fearful
                * `😩` - 😩 Weary
                * `😰` - 😰 Open Mouth Cold Sweat
                * `😱` - 😱 Screaming
                * `😳` - 😳 Flushed
                * `😵` - 😵 Dizzy
                * `😡` - 😡 Pouting
                * `😠` - 😠 Angry
                * `👿` - 👿 Imp
                * `😈` - 😈 Smiling Face With Horns
                * `👦` - 👦 Boy
                * `👧` - 👧 Girl
                * `👨` - 👨 Generic Man
                * `👩` - 👩 Generic Woman
                * `👴` - 👴 Older Man
                * `👵` - 👵 Older Woman
                * `👶` - 👶 Baby
                * `👱` - 👱 Person With Blond Hair
                * `👮` - 👮 Police Officer
                * `👲` - 👲 Man With Gua Pi Mao
                * `👳` - 👳 Man With Turban
                * `👷` - 👷 Trade Worker
                * `👸` - 👸 Princess
                * `💂` - 💂 Guardsman
                * `🎅` - 🎅 Santa Claus
                * `👼` - 👼 Baby Angel
                * `👯` - 👯 Bunny Women
                * `💆` - 💆 Face Massage
                * `💇` - 💇 Haircut
                * `👰` - 👰 Bride
                * `🙍` - 🙍 Person Frowning
                * `🙎` - 🙎 Person With Pouting
                * `🙅` - 🙅 Block Gesture
                * `🙆` - 🙆 OK Gesture
                * `💁` - 💁 Sass Gesture
                * `🙋` - 🙋 Raised Hand
                * `🙇` - 🙇 Deep Bow
                * `🙌` - 🙌 Praise Hands
                * `🙏` - 🙏 Prayer Hands
                * `👤` - 👤 Bust in Silhouette
                * `👥` - 👥 Busts in Silhouette
                * `🚶` - 🚶 Pedestrian
                * `🏃` - 🏃 Runner
                * `💃` - 💃 Dancer
                * `💏` - 💏 Kiss
                * `💑` - 💑 Heteronormative Couple
                * `👪` - 👪 Hetero Family
                * `👫` - 👫 Man & Woman
                * `👬` - 👬 Two Men
                * `👭` - 👭 Two Women
                * `💪` - 💪 Biceps
                * `👈` - 👈 Left Pointing Backhand
                * `👉` - 👉 Right Pointing Backhand
                * `👆` - 👆 Pointing Hand
                * `👇` - 👇 Down Pointing Backhand
                * `✊` - ✊ Power Hand
                * `✋` - ✋ Palm Hand
                * `👊` - 👊 Fist Hand
                * `👌` - 👌 OK Hand
                * `👍` - 👍 Thumbs Up
                * `👎` - 👎 Thumbs Down
                * `👋` - 👋 Waving Hand Sign
                * `👏` - 👏 Clappy Hands
                * `👐` - 👐 Open Hands Sign
                * `💅` - 💅 Nail Polish
                * `👣` - 👣 Footprints
                * `👀` - 👀 Eyes
                * `👂` - 👂 Ear
                * `👃` - 👃 Nose
                * `👅` - 👅 Lick
                * `👄` - 👄 Mouth
                * `💋` - 💋 Kiss Mark
                * `💘` - 💘 Cupid Arrow
                * `💓` - 💓 Beating Heart
                * `💔` - 💔 Broken Heart
                * `💕` - 💕 Two Hearts
                * `💖` - 💖 Sparkly Heart
                * `💗` - 💗 Growing Heart
                * `💙` - 💙 Blue Heart
                * `💚` - 💚 Green Heart
                * `💛` - 💛 Yellow Heart
                * `💜` - 💜 Purple Heart
                * `💝` - 💝 Heart With Ribbon
                * `💞` - 💞 Revolving Hearts
                * `💟` - 💟 Heart Decoration
                * `💌` - 💌 Love Letter
                * `💧` - 💧 Droplet
                * `💤` - 💤 ZZZ
                * `💢` - 💢 Anger
                * `💣` - 💣 Bomb
                * `💥` - 💥 Sparks
                * `💦` - 💦 Splashing
                * `💨` - 💨 Dash
                * `💫` - 💫 Shooting Star
                * `💬` - 💬 Speech Bubble
                * `💭` - 💭 Thinky Cloud
                * `👓` - 👓 Eyeglasses
                * `👔` - 👔 Business Casual
                * `👕` - 👕 T-Shirt
                * `👖` - 👖 Jeans
                * `👗` - 👗 Dress
                * `👘` - 👘 Kimono
                * `👙` - 👙 Bikini
                * `👚` - 👚 Womans Clothes
                * `👛` - 👛 Purse
                * `👜` - 👜 Handbag
                * `👝` - 👝 Pouch
                * `🎒` - 🎒 Backpack
                * `👞` - 👞 Mans Shoe
                * `👟` - 👟 Running Shoe
                * `👠` - 👠 Heels
                * `👡` - 👡 Womans Sandal
                * `👢` - 👢 Womans Boots
                * `👑` - 👑 Crown
                * `👒` - 👒 Lady's Hat
                * `🎩` - 🎩 Top Hat
                * `💄` - 💄 Lipstick
                * `💍` - 💍 Proposal
                * `💎` - 💎 Gem
                * `👹` - 👹 Japanese Ogre
                * `👺` - 👺 Japanese Goblin
                * `👻` - 👻 Ghost
                * `💀` - 💀 Skull
                * `👽` - 👽 Alien
                * `👾` - 👾 Space Invader
                * `💩` - 💩 Pile of Poo
                * `🐵` - 🐵 Monkey
                * `🙈` - 🙈 See No Evil
                * `🙉` - 🙉 Hear No Evil
                * `🙊` - 🙊 Speak No Evil
                * `🐒` - 🐒 Monkey
                * `🐶` - 🐶 Dog
                * `🐕` - 🐕 Dog
                * `🐩` - 🐩 Poodle
                * `🐺` - 🐺 Wolf
                * `🐱` - 🐱 Cat
                * `😸` - 😸 Grinning Cat with Smiling Eyes
                * `😹` - 😹 Cat with Tears of Joy
                * `😺` - 😺 Smiling Cat with Open Mouth
                * `😻` - 😻 Smiling Cat with Heart Eyes
                * `😼` - 😼 Cat with Wry Smile
                * `😽` - 😽 Kissing Cat with Closed Eyes
                * `😾` - 😾 Pouting Cat Face
                * `😿` - 😿 Crying Cat Face
                * `🙀` - 🙀 Weary Cat Face
                * `🐈` - 🐈 Cat
                * `🐯` - 🐯 Tiger
                * `🐅` - 🐅 Tiger
                * `🐆` - 🐆 Leopard
                * `🐴` - 🐴 Horse
                * `🐎` - 🐎 Horse
                * `🐮` - 🐮 Cow
                * `🐂` - 🐂 Ox
                * `🐃` - 🐃 Water Buffalo
                * `🐄` - 🐄 Cow
                * `🐷` - 🐷 Pig
                * `🐖` - 🐖 Pig
                * `🐗` - 🐗 Boar
                * `🐽` - 🐽 Pig Nose
                * `🐏` - 🐏 Ram
                * `🐑` - 🐑 Sheep
                * `🐐` - 🐐 Goat
                * `🐪` - 🐪 Dromedary Camel
                * `🐫` - 🐫 Bactrian Camel
                * `🐘` - 🐘 Elephant
                * `🐭` - 🐭 Mouse
                * `🐁` - 🐁 Mouse
                * `🐀` - 🐀 Rat
                * `🐹` - 🐹 Hamster
                * `🐰` - 🐰 Rabbit
                * `🐇` - 🐇 Rabbit
                * `🐻` - 🐻 Bear
                * `🐨` - 🐨 Koala
                * `🐼` - 🐼 Panda
                * `🐾` - 🐾 Paw Prints
                * `🐔` - 🐔 Chicken
                * `🐓` - 🐓 Rooster
                * `🐣` - 🐣 Hatching
                * `🐤` - 🐤 Chick
                * `🐥` - 🐥 Front-Facing Baby Chick
                * `🐦` - 🐦 Bird
                * `🐧` - 🐧 Penguin
                * `🐸` - 🐸 Frog
                * `🐊` - 🐊 Croc
                * `🐢` - 🐢 Turtle
                * `🐍` - 🐍 Slithering
                * `🐲` - 🐲 Dragon
                * `🐉` - 🐉 Dragon
                * `🐳` - 🐳 Whale
                * `🐋` - 🐋 Whale
                * `🐬` - 🐬 Dolphin
                * `🐟` - 🐟 Fish
                * `🐠` - 🐠 Fish
                * `🐡` - 🐡 Blowfish
                * `🐙` - 🐙 Octopus
                * `🐚` - 🐚 Shell
                * `🐌` - 🐌 Snail
                * `🐛` - 🐛 Bug
                * `🐜` - 🐜 Ant
                * `🐝` - 🐝 Honeybee
                * `🐞` - 🐞 Lady Beetle
                * `💐` - 💐 Bouquet
                * `🌸` - 🌸 Sakura
                * `💮` - 💮 White Flower
                * `🌹` - 🌹 Rose
                * `🌺` - 🌺 Hibiscus
                * `🌻` - 🌻 Sunflower
                * `🌼` - 🌼 Blossom
                * `🌷` - 🌷 Tulip
                * `🌱` - 🌱 Seedling
                * `🌲` - 🌲 Evergreen Tree
                * `🌳` - 🌳 Deciduous Tree
                * `🌴` - 🌴 Palm Tree
                * `🌵` - 🌵 Cactus
                * `🌾` - 🌾 Ear of Rice
                * `🌿` - 🌿 Herb
                * `🍀` - 🍀 Clover
                * `🍁` - 🍁 Maple Leaf
                * `🍂` - 🍂 Fallen Leaf
                * `🍃` - 🍃 Blown Leaves
                * `🍇` - 🍇 Grapes
                * `🍈` - 🍈 Melon
                * `🍉` - 🍉 Watermelon
                * `🍊` - 🍊 Tangerine
                * `🍋` - 🍋 Lemon
                * `🍌` - 🍌 Banana
                * `🍍` - 🍍 Pineapple
                * `🍎` - 🍎 Red Apple
                * `🍏` - 🍏 Green Apple
                * `🍐` - 🍐 Pear
                * `🍑` - 🍑 Peach
                * `🍒` - 🍒 Cherries
                * `🍓` - 🍓 Strawberry
                * `🍅` - 🍅 Tomato
                * `🍆` - 🍆 Eggplant
                * `🌽` - 🌽 Corn
                * `🍄` - 🍄 Mushroom
                * `🌰` - 🌰 Chestnut
                * `🍞` - 🍞 Bread
                * `🍖` - 🍖 Meat on Bone
                * `🍗` - 🍗 Poultry Leg
                * `🍔` - 🍔 Hamburger
                * `🍟` - 🍟 Fries
                * `🍕` - 🍕 Pizza
                * `🍲` - 🍲 Pot of Food
                * `🍱` - 🍱 Bento Box
                * `🍘` - 🍘 Rice Cracker
                * `🍙` - 🍙 Rice Ball
                * `🍚` - 🍚 Cooked Rice
                * `🍛` - 🍛 Curry and Rice
                * `🍜` - 🍜 Steaming Bowl
                * `🍝` - 🍝 Spaghetti
                * `🍠` - 🍠 Sweet Potato
                * `🍢` - 🍢 Oden
                * `🍣` - 🍣 Sushi
                * `🍤` - 🍤 Fried Shrimp
                * `🍥` - 🍥 Fish Cake With Swirl Design
                * `🍡` - 🍡 Dango
                * `🍦` - 🍦 Ice Cream
                * `🍧` - 🍧 Shaved Ice
                * `🍨` - 🍨 Ice Cream
                * `🍩` - 🍩 Doughnut
                * `🍪` - 🍪 Cookie
                * `🎂` - 🎂 Birthday Cake
                * `🍰` - 🍰 Shortcake
                * `🍫` - 🍫 Chocolate Bar
                * `🍬` - 🍬 Candy
                * `🍭` - 🍭 Lollipop
                * `🍮` - 🍮 Custard
                * `🍯` - 🍯 Honey Pot
                * `🍼` - 🍼 Baby Bottle
                * `🍵` - 🍵 Teacup Without Handle
                * `🍶` - 🍶 Sake Bottle and Cup
                * `🍷` - 🍷 Wine Glass
                * `🍸` - 🍸 Cocktail Glass
                * `🍹` - 🍹 Tropical Drink
                * `🍺` - 🍺 Beer
                * `🍻` - 🍻 Clinking Beer Mugs
                * `🍴` - 🍴 Fork & Knife
                * `🍳` - 🍳 Cooking
                * `🌍` - 🌍 Earth Globe Europe-Africa
                * `🌎` - 🌎 Earth Globe Americas
                * `🌏` - 🌏 Earth Globe Asia-Australia
                * `🌐` - 🌐 Globe With Meridians
                * `🌋` - 🌋 Volcano
                * `🗻` - 🗻 Mount Fuji
                * `🏠` - 🏠 House
                * `🏡` - 🏡 House With Garden
                * `🏢` - 🏢 Office
                * `🏣` - 🏣 Japanese Post Office
                * `🏤` - 🏤 European Post Office
                * `🏥` - 🏥 Hospital
                * `🏦` - 🏦 Bank
                * `🏨` - 🏨 Hotel
                * `🏩` - 🏩 Love Hotel
                * `🏪` - 🏪 Convenience Store
                * `🏫` - 🏫 School
                * `🏬` - 🏬 Department Store
                * `🏭` - 🏭 Factory
                * `🏯` - 🏯 Japanese Castle
                * `🏰` - 🏰 Castle
                * `💒` - 💒 Wedding
                * `🗼` - 🗼 Tokyo Tower
                * `🗽` - 🗽 Liberty
                * `🗾` - 🗾 Silhouette of Japan
                * `🌁` - 🌁 Foggy
                * `🌃` - 🌃 Night With Stars
                * `🌄` - 🌄 Sunrise Over Mountains
                * `🌅` - 🌅 Sunrise
                * `🌆` - 🌆 Cityscape at Dusk
                * `🌇` - 🌇 Sunset Over Buildings
                * `🌉` - 🌉 Bridge at Night
                * `🌊` - 🌊 Big Wave
                * `🗿` - 🗿 Moyai
                * `🌌` - 🌌 Milky Way
                * `🎠` - 🎠 Carousel Horse
                * `🎡` - 🎡 Ferris Wheel
                * `🎢` - 🎢 Roller Coaster
                * `💈` - 💈 Barber Pole
                * `🎪` - 🎪 Circus Tent
                * `🎭` - 🎭 Performing Arts
                * `🎨` - 🎨 Palette
                * `🎰` - 🎰 Slot Machine
                * `🚂` - 🚂 Steam Locomotive
                * `🚃` - 🚃 Railcar
                * `🚄` - 🚄 Fast Train
                * `🚅` - 🚅 Fast Train with Bullet Nose
                * `🚆` - 🚆 Train
                * `🚇` - 🚇 Metro
                * `🚈` - 🚈 Light Rail
                * `🚉` - 🚉 Station
                * `🚊` - 🚊 Tram
                * `🚝` - 🚝 Monorail
                * `🚞` - 🚞 Mountain Railway
                * `🚋` - 🚋 Tram Car
                * `🚌` - 🚌 Bus
                * `🚍` - 🚍 Bus
                * `🚎` - 🚎 Trolleybus
                * `🚏` - 🚏 Bus Stop
                * `🚐` - 🚐 Minibus
                * `🚑` - 🚑 Ambulance
                * `🚒` - 🚒 Fire Engine
                * `🚓` - 🚓 Police Car
                * `🚔` - 🚔 Police Car
                * `🚕` - 🚕 Taxi
                * `🚖` - 🚖 Oncoming Taxi
                * `🚗` - 🚗 Automobile
                * `🚘` - 🚘 Automobile
                * `🚙` - 🚙 Recreational Vehicle
                * `🚚` - 🚚 Truck
                * `🚛` - 🚛 Articulated Lorry
                * `🚜` - 🚜 Tractor
                * `🚲` - 🚲 Bicycle
                * `🚳` - 🚳 No Bicycles
                * `🚨` - 🚨 Alert Light
                * `🔱` - 🔱 Trident
                * `🚣` - 🚣 Rowboat
                * `🚤` - 🚤 Speedboat
                * `🚢` - 🚢 Ship
                * `💺` - 💺 Seat
                * `🚁` - 🚁 Helicopter
                * `🚟` - 🚟 Suspension Railway
                * `🚠` - 🚠 Sky Tram
                * `🚡` - 🚡 Aerial Tramway
                * `🚀` - 🚀 Rocket
                * `🏧` - 🏧 ATM
                * `🚮` - 🚮 Put Litter in Its Place
                * `🚥` - 🚥 Horizontal Traffic Light
                * `🚦` - 🚦 Traffic Light
                * `🚧` - 🚧 Hazard Sign
                * `🚫` - 🚫 Prohibited
                * `🚭` - 🚭 No Smoking
                * `🚯` - 🚯 Do Not Litter
                * `🚰` - 🚰 Tap Water
                * `🚱` - 🚱 Non-Potable Water
                * `🚷` - 🚷 No Pedestrians
                * `🚸` - 🚸 Children Crossing
                * `🚹` - 🚹 Mens Symbol
                * `🚺` - 🚺 Womens Symbol
                * `🚻` - 🚻 Restroom
                * `🚼` - 🚼 Baby Symbol
                * `🚾` - 🚾 Water Closet
                * `🛂` - 🛂 Passport Control
                * `🛃` - 🛃 Customs
                * `🛄` - 🛄 Baggage Claim
                * `🛅` - 🛅 Left Luggage
                * `🚪` - 🚪 Door
                * `🚽` - 🚽 Toilet
                * `🚿` - 🚿 Shower
                * `🛀` - 🛀 Bath
                * `🛁` - 🛁 Bathtub
                * `⏳` - ⏳ Hourglass
                * `⏰` - ⏰ Alarm Clock
                * `⏱` - ⏱ Stopwatch
                * `⏲` - ⏲ Timer Clock
                * `🕛` - 🕛 Twelve O'Clock
                * `🕧` - 🕧 Half Past Twelve
                * `🕐` - 🕐 One O'Clock
                * `🕜` - 🕜 Half Past One
                * `🕑` - 🕑 Two O'Clock
                * `🕝` - 🕝 Half Past Two
                * `🕒` - 🕒 Three O'Clock
                * `🕞` - 🕞 Half Past Three
                * `🕓` - 🕓 Four O'Clock
                * `🕟` - 🕟 Half Past Four
                * `🕔` - 🕔 Five O'Clock
                * `🕠` - 🕠 Half Past Five
                * `🕕` - 🕕 Six O'Clock
                * `🕡` - 🕡 Half Past Six
                * `🕖` - 🕖 Seven O'Clock
                * `🕢` - 🕢 Half Past Seven
                * `🕗` - 🕗 Eight O'Clock
                * `🕣` - 🕣 Half Past Eight
                * `🕘` - 🕘 Nine O'Clock
                * `🕤` - 🕤 Half Past Nine
                * `🕙` - 🕙 Ten O'Clock
                * `🕥` - 🕥 Half Past Ten
                * `🕚` - 🕚 Eleven O'Clock
                * `🕦` - 🕦 Half Past Eleven
                * `⛎` - ⛎ Ophiuchus
                * `🌑` - 🌑 New Moon
                * `🌒` - 🌒 Waxing Crescent
                * `🌓` - 🌓 First Quarter Moon Symbol
                * `🌔` - 🌔 Waxing Gibbous
                * `🌕` - 🌕 Full Moon
                * `🌖` - 🌖 Waning Gibbous
                * `🌗` - 🌗 Half Moon
                * `🌘` - 🌘 Waning Crescent
                * `🌙` - 🌙 Crescent Moon
                * `🌚` - 🌚 New Moon With Face
                * `🌛` - 🌛 First Quarter Moon With Face
                * `🌜` - 🌜 Last Quarter Moon With Face
                * `🌝` - 🌝 Full Moon With Face
                * `🌞` - 🌞 Sun
                * `🌀` - 🌀 Cyclone
                * `🌈` - 🌈 Rainbow
                * `🌂` - 🌂 Umbrella
                * `🌟` - 🌟 Glowing Star
                * `🌠` - 🌠 Shooting Star
                * `🔥` - 🔥 Fire
                * `🎃` - 🎃 Jack-O-Lantern
                * `🎄` - 🎄 Presents Tree
                * `🎆` - 🎆 Fireworks
                * `🎇` - 🎇 Firework Sparkler
                * `✨` - ✨ Sparkles
                * `🎈` - 🎈 Balloon
                * `🎉` - 🎉 Party Pop
                * `🎊` - 🎊 Confetti Ball
                * `🎋` - 🎋 Tanabata Tree
                * `🎌` - 🎌 Crossed Flags
                * `🎍` - 🎍 Pine Decoration
                * `🎎` - 🎎 Japanese Dolls
                * `🎏` - 🎏 Carp Streamer
                * `🎐` - 🎐 Wind Chime
                * `🎑` - 🎑 Moon Viewing Ceremony
                * `🎓` - 🎓 Grad Cap
                * `🎯` - 🎯 Bullseye
                * `🎴` - 🎴 Flower Playing Cards
                * `🎀` - 🎀 Ribbon
                * `🎁` - 🎁 Wrapped Present
                * `🎫` - 🎫 Ticket
                * `🏀` - 🏀 Basketball
                * `🏈` - 🏈 America Ball
                * `🏉` - 🏉 Rugby Ball
                * `🎾` - 🎾 Tennis
                * `🎱` - 🎱 Billiards
                * `🎳` - 🎳 Bowling
                * `🎣` - 🎣 Fishing Pole and Fish
                * `🎽` - 🎽 Running Shirt With Sash
                * `🎿` - 🎿 Ski and Ski Boot
                * `🏂` - 🏂 Snowboarder
                * `🏄` - 🏄 Surfer
                * `🏇` - 🏇 Horse Racing
                * `🏊` - 🏊 Swimmer
                * `🚴` - 🚴 Bicyclist
                * `🚵` - 🚵 Mountain Bicyclist
                * `🏆` - 🏆 Trophy
                * `🎮` - 🎮 Video Game
                * `🎲` - 🎲 Random Cube
                * `🃏` - 🃏 Playing Card Black Joker
                * `🔇` - 🔇 Speaker With Cancellation Stroke
                * `🔈` - 🔈 Speaker
                * `🔉` - 🔉 Speaker With One Sound Wave
                * `🔊` - 🔊 Speaker With Three Sound Waves
                * `📢` - 📢 Public Address Loudspeaker
                * `📣` - 📣 Loud Phone
                * `📯` - 📯 Horn
                * `🔔` - 🔔 Bell
                * `🔕` - 🔕 No Bells
                * `🔀` - 🔀 Shuffle
                * `🔁` - 🔁 Repeat
                * `🔂` - 🔂 Repeat Once
                * `⏩` - ⏩ Fast Forward
                * `⏭` - ⏭ Next Track
                * `⏯` - ⏯ Play/Pause
                * `⏪` - ⏪ Rewind
                * `⏮` - ⏮ Previous Track
                * `🔼` - 🔼 Up-Pointing Small Red Triangle
                * `⏫` - ⏫ Up to Top
                * `🔽` - 🔽 Down-Pointing Small Red Triangle
                * `⏬` - ⏬ Down to Bottom
                * `🎼` - 🎼 Musical Score
                * `🎵` - 🎵 Musical Note
                * `🎶` - 🎶 Music Notes
                * `🎤` - 🎤 Microphone
                * `🎧` - 🎧 Headphone
                * `🎷` - 🎷 Saxophone
                * `🎸` - 🎸 Guitar
                * `🎹` - 🎹 Keyboard
                * `🎺` - 🎺 Trumpet
                * `🎻` - 🎻 Violin
                * `📻` - 📻 Boom Box
                * `📱` - 📱 Internet Phone
                * `📳` - 📳 Vibration Mode
                * `📴` - 📴 Mobile Phone Off
                * `📲` - 📲 Download to Phone
                * `📵` - 📵 No Mobile Phones
                * `📞` - 📞 Old Phone
                * `🔟` - 🔟 Keycap Ten
                * `📶` - 📶 Antenna With Bars
                * `📟` - 📟 Pager
                * `📠` - 📠 Fax Machine
                * `🔋` - 🔋 Battery
                * `🔌` - 🔌 Plug
                * `💻` - 💻 Personal Computer
                * `💽` - 💽 Minidisc
                * `💾` - 💾 Floppy
                * `💿` - 💿 Compact Disc
                * `📀` - 📀 DVD
                * `🎥` - 🎥 Movie Camera
                * `🎦` - 🎦 Cinema
                * `🎬` - 🎬 Clapper
                * `📺` - 📺 Television
                * `📷` - 📷 Camera
                * `📹` - 📹 Video Camera
                * `📼` - 📼 Videocassette
                * `🔅` - 🔅 Low Brightness Symbol
                * `🔆` - 🔆 High Brightness Symbol
                * `🔍` - 🔍 Bigger Glass
                * `🔎` - 🔎 Right-Pointing Magnifying Glass
                * `🔬` - 🔬 Microscope
                * `🔭` - 🔭 Telescope
                * `📡` - 📡 Satellite Dish
                * `💡` - 💡 Light Bulb
                * `🔦` - 🔦 Electric Torch
                * `🏮` - 🏮 Izakaya Lantern
                * `📔` - 📔 Notebook With Decorative Cover
                * `📕` - 📕 Closed Book
                * `📖` - 📖 Open Book
                * `📗` - 📗 Green Book
                * `📘` - 📘 Blue Book
                * `📙` - 📙 Orange Book
                * `📚` - 📚 Books
                * `📓` - 📓 Notebook
                * `📒` - 📒 Ledger
                * `📃` - 📃 Page With Curl
                * `📜` - 📜 Scroll
                * `📄` - 📄 Page Facing Up
                * `📰` - 📰 Newspaper
                * `📑` - 📑 Bookmark Tabs
                * `🔖` - 🔖 Bookmark
                * `💰` - 💰 Money Bag
                * `💴` - 💴 Banknote With Yen Sign
                * `💵` - 💵 Banknote With Dollar Sign
                * `💶` - 💶 Banknote With Euro Sign
                * `💷` - 💷 Banknote With Pound Sign
                * `💸` - 💸 Flying Money
                * `💱` - 💱 Currency Exchange
                * `💲` - 💲 Heavy Dollar Sign
                * `💳` - 💳 Credit Card
                * `💹` - 💹 Upwards Trend in Yen
                * `📧` - 📧 E-Mail Symbol
                * `📨` - 📨 Incoming Envelope
                * `📩` - 📩 Going Into Envelope
                * `📤` - 📤 Outbox Tray
                * `📥` - 📥 Inbox Tray
                * `📦` - 📦 Package
                * `📫` - 📫 Mailbox
                * `📪` - 📪 Closed Mailbox With Lowered Flag
                * `📬` - 📬 Open Mailbox With Raised Flag
                * `📭` - 📭 Open Mailbox With Lowered Flag
                * `📮` - 📮 Postbox
                * `📝` - 📝 Memo
                * `💼` - 💼 Briefcase
                * `📁` - 📁 File Folder
                * `📂` - 📂 Open File Folder
                * `📅` - 📅 Dated
                * `📆` - 📆 Tear-Off Calendar
                * `📇` - 📇 Card Index
                * `📈` - 📈 Up Trend
                * `📉` - 📉 Down Trend
                * `📊` - 📊 Bar Chart
                * `📋` - 📋 Clipboard
                * `📌` - 📌 Pushpin
                * `📍` - 📍 Location
                * `📎` - 📎 Paperclip
                * `📏` - 📏 Straight Line
                * `📐` - 📐 Three Sides
                * `📛` - 📛 Name Badge
                * `🔒` - 🔒 Lock
                * `🔓` - 🔓 Open Lock
                * `🔏` - 🔏 Lock With Ink Pen
                * `🔐` - 🔐 Closed Lock With Key
                * `🔑` - 🔑 Key
                * `🔨` - 🔨 Hammer
                * `🔧` - 🔧 Spanner
                * `🔩` - 🔩 Calipers
                * `🔗` - 🔗 Link Symbol
                * `💉` - 💉 Syringe
                * `💊` - 💊 Pill
                * `🔪` - 🔪 Chef Knife
                * `🔫` - 🔫 Pistol
                * `🚬` - 🚬 Durry
                * `🏁` - 🏁 Get Set Go
                * `🚩` - 🚩 Triangular Flag on Post
                * `🇦🇫` - 🇦🇫 Afghanistan
                * `🇦🇽` - 🇦🇽 Åland Islands
                * `🇦🇱` - 🇦🇱 Albania
                * `🇩🇿` - 🇩🇿 Algeria
                * `🇦🇸` - 🇦🇸 American Samoa
                * `🇦🇩` - 🇦🇩 Andorra
                * `🇦🇴` - 🇦🇴 Angola
                * `🇦🇮` - 🇦🇮 Anguilla
                * `🇦🇶` - 🇦🇶 Antarctica
                * `🇦🇬` - 🇦🇬 Antigua & Barbuda
                * `🇦🇷` - 🇦🇷 Argentina
                * `🇦🇲` - 🇦🇲 Armenia
                * `🇦🇼` - 🇦🇼 Aruba
                * `🇦🇨` - 🇦🇨 Ascension Island
                * `🇦🇺` - 🇦🇺 Australia
                * `🇦🇹` - 🇦🇹 Austria
                * `🇦🇿` - 🇦🇿 Azerbaijan
                * `🇧🇸` - 🇧🇸 Bahamas
                * `🇧🇭` - 🇧🇭 Bahrain
                * `🇧🇩` - 🇧🇩 Bangladesh
                * `🇧🇧` - 🇧🇧 Barbados
                * `🇧🇾` - 🇧🇾 Belarus
                * `🇧🇪` - 🇧🇪 Belgium
                * `🇧🇿` - 🇧🇿 Belize
                * `🇧🇯` - 🇧🇯 Benin
                * `🇧🇲` - 🇧🇲 Bermuda
                * `🇧🇹` - 🇧🇹 Bhutan
                * `🇧🇴` - 🇧🇴 Bolivia
                * `🇧🇦` - 🇧🇦 Bosnia & Herzegovina
                * `🇧🇼` - 🇧🇼 Botswana
                * `🇧🇻` - 🇧🇻 Bouvet Island
                * `🇧🇷` - 🇧🇷 Brazil
                * `🇮🇴` - 🇮🇴 British Indian Ocean Territory
                * `🇻🇬` - 🇻🇬 British Virgin Islands
                * `🇧🇳` - 🇧🇳 Brunei
                * `🇧🇬` - 🇧🇬 Bulgaria
                * `🇧🇫` - 🇧🇫 Burkina Faso
                * `🇧🇮` - 🇧🇮 Burundi
                * `🇰🇭` - 🇰🇭 Cambodia
                * `🇨🇲` - 🇨🇲 Cameroon
                * `🇨🇦` - 🇨🇦 Canada
                * `🇮🇨` - 🇮🇨 Canary Islands
                * `🇨🇻` - 🇨🇻 Cape Verde
                * `🇧🇶` - 🇧🇶 Caribbean Netherlands
                * `🇰🇾` - 🇰🇾 Cayman Islands
                * `🇨🇫` - 🇨🇫 Central African Republic
                * `🇪🇦` - 🇪🇦 Ceuta & Melilla
                * `🇹🇩` - 🇹🇩 Chad
                * `🇨🇱` - 🇨🇱 Chile
                * `🇨🇳` - 🇨🇳 China
                * `🇨🇽` - 🇨🇽 Christmas Island
                * `🇨🇵` - 🇨🇵 Clipperton Island
                * `🇨🇨` - 🇨🇨 Cocos Islands
                * `🇨🇴` - 🇨🇴 Colombia
                * `🇰🇲` - 🇰🇲 Comoros
                * `🇨🇬` - 🇨🇬 Congo - Brazzaville
                * `🇨🇩` - 🇨🇩 Congo - Kinshasa
                * `🇨🇰` - 🇨🇰 Cook Islands
                * `🇨🇷` - 🇨🇷 Costa Rica
                * `🇨🇮` - 🇨🇮 Côte D’Ivoire
                * `🇭🇷` - 🇭🇷 Croatia
                * `🇨🇺` - 🇨🇺 Cuba
                * `🇨🇼` - 🇨🇼 Curaçao
                * `🇨🇾` - 🇨🇾 Cyprus
                * `🇨🇿` - 🇨🇿 Czech Republic
                * `🇩🇰` - 🇩🇰 Denmark
                * `🇩🇬` - 🇩🇬 Diego Garcia
                * `🇩🇯` - 🇩🇯 Djibouti
                * `🇩🇲` - 🇩🇲 Dominica
                * `🇩🇴` - 🇩🇴 Dominican Republic
                * `🇪🇨` - 🇪🇨 Ecuador
                * `🇪🇬` - 🇪🇬 Egypt
                * `🇸🇻` - 🇸🇻 El Salvador
                * `🇬🇶` - 🇬🇶 Equatorial Guinea
                * `🇪🇷` - 🇪🇷 Eritrea
                * `🇪🇪` - 🇪🇪 Estonia
                * `🇪🇹` - 🇪🇹 Ethiopia
                * `🇪🇺` - 🇪🇺 European Union
                * `🇫🇰` - 🇫🇰 Falkland Islands
                * `🇫🇴` - 🇫🇴 Faroe Islands
                * `🇫🇯` - 🇫🇯 Fiji
                * `🇫🇮` - 🇫🇮 Finland
                * `🇫🇷` - 🇫🇷 France
                * `🇬🇫` - 🇬🇫 French Guiana
                * `🇵🇫` - 🇵🇫 French Polynesia
                * `🇹🇫` - 🇹🇫 French Southern Territories
                * `🇬🇦` - 🇬🇦 Gabon
                * `🇬🇲` - 🇬🇲 Gambia
                * `🇬🇪` - 🇬🇪 Georgia
                * `🇩🇪` - 🇩🇪 Germany
                * `🇬🇭` - 🇬🇭 Ghana
                * `🇬🇮` - 🇬🇮 Gibraltar
                * `🇬🇷` - 🇬🇷 Greece
                * `🇬🇱` - 🇬🇱 Greenland
                * `🇬🇩` - 🇬🇩 Grenada
                * `🇬🇵` - 🇬🇵 Guadeloupe
                * `🇬🇺` - 🇬🇺 Guam
                * `🇬🇹` - 🇬🇹 Guatemala
                * `🇬🇬` - 🇬🇬 Guernsey
                * `🇬🇳` - 🇬🇳 Guinea
                * `🇬🇼` - 🇬🇼 Guinea-Bissau
                * `🇬🇾` - 🇬🇾 Guyana
                * `🇭🇹` - 🇭🇹 Haiti
                * `🇭🇲` - 🇭🇲 Heard & McDonald Islands
                * `🇭🇳` - 🇭🇳 Honduras
                * `🇭🇰` - 🇭🇰 Hong Kong
                * `🇭🇺` - 🇭🇺 Hungary
                * `🇮🇸` - 🇮🇸 Iceland
                * `🇮🇳` - 🇮🇳 India
                * `🇮🇩` - 🇮🇩 Indonesia
                * `🇮🇷` - 🇮🇷 Iran
                * `🇮🇶` - 🇮🇶 Iraq
                * `🇮🇪` - 🇮🇪 Ireland
                * `🇮🇲` - 🇮🇲 Isle of Man
                * `🇮🇱` - 🇮🇱 Israel
                * `🇮🇹` - 🇮🇹 Italy
                * `🇯🇲` - 🇯🇲 Jamaica
                * `🇯🇵` - 🇯🇵 Japan
                * `🇯🇪` - 🇯🇪 Jersey
                * `🇯🇴` - 🇯🇴 Jordan
                * `🇰🇿` - 🇰🇿 Kazakhstan
                * `🇰🇪` - 🇰🇪 Kenya
                * `🇰🇮` - 🇰🇮 Kiribati
                * `🇽🇰` - 🇽🇰 Kosovo
                * `🇰🇼` - 🇰🇼 Kuwait
                * `🇰🇬` - 🇰🇬 Kyrgyzstan
                * `🇱🇦` - 🇱🇦 Laos
                * `🇱🇻` - 🇱🇻 Latvia
                * `🇱🇧` - 🇱🇧 Lebanon
                * `🇱🇸` - 🇱🇸 Lesotho
                * `🇱🇷` - 🇱🇷 Liberia
                * `🇱🇾` - 🇱🇾 Libya
                * `🇱🇮` - 🇱🇮 Liechtenstein
                * `🇱🇹` - 🇱🇹 Lithuania
                * `🇱🇺` - 🇱🇺 Luxembourg
                * `🇲🇴` - 🇲🇴 Macau
                * `🇲🇰` - 🇲🇰 Macedonia
                * `🇲🇬` - 🇲🇬 Madagascar
                * `🇲🇼` - 🇲🇼 Malawi
                * `🇲🇾` - 🇲🇾 Malaysia
                * `🇲🇻` - 🇲🇻 Maldives
                * `🇲🇱` - 🇲🇱 Mali
                * `🇲🇹` - 🇲🇹 Malta
                * `🇲🇭` - 🇲🇭 Marshall Islands
                * `🇲🇶` - 🇲🇶 Martinique
                * `🇲🇷` - 🇲🇷 Mauritania
                * `🇲🇺` - 🇲🇺 Mauritius
                * `🇾🇹` - 🇾🇹 Mayotte
                * `🇲🇽` - 🇲🇽 Mexico
                * `🇫🇲` - 🇫🇲 Micronesia
                * `🇲🇩` - 🇲🇩 Moldova
                * `🇲🇨` - 🇲🇨 Monaco
                * `🇲🇳` - 🇲🇳 Mongolia
                * `🇲🇪` - 🇲🇪 Montenegro
                * `🇲🇸` - 🇲🇸 Montserrat
                * `🇲🇦` - 🇲🇦 Morocco
                * `🇲🇿` - 🇲🇿 Mozambique
                * `🇲🇲` - 🇲🇲 Myanmar
                * `🇳🇦` - 🇳🇦 Namibia
                * `🇳🇷` - 🇳🇷 Nauru
                * `🇳🇵` - 🇳🇵 Nepal
                * `🇳🇱` - 🇳🇱 Netherlands
                * `🇳🇨` - 🇳🇨 New Caledonia
                * `🇳🇿` - 🇳🇿 New Zealand
                * `🇳🇮` - 🇳🇮 Nicaragua
                * `🇳🇪` - 🇳🇪 Niger
                * `🇳🇬` - 🇳🇬 Nigeria
                * `🇳🇺` - 🇳🇺 Niue
                * `🇳🇫` - 🇳🇫 Norfolk Island
                * `🇲🇵` - 🇲🇵 Northern Mariana Islands
                * `🇰🇵` - 🇰🇵 North Korea
                * `🇳🇴` - 🇳🇴 Norway
                * `🇴🇲` - 🇴🇲 Oman
                * `🇵🇰` - 🇵🇰 Pakistan
                * `🇵🇼` - 🇵🇼 Palau
                * `🇵🇸` - 🇵🇸 Palestinian Territories
                * `🇵🇦` - 🇵🇦 Panama
                * `🇵🇬` - 🇵🇬 Papua New Guinea
                * `🇵🇾` - 🇵🇾 Paraguay
                * `🇵🇪` - 🇵🇪 Peru
                * `🇵🇭` - 🇵🇭 Philippines
                * `🇵🇳` - 🇵🇳 Pitcairn Islands
                * `🇵🇱` - 🇵🇱 Poland
                * `🇵🇹` - 🇵🇹 Portugal
                * `🇵🇷` - 🇵🇷 Puerto Rico
                * `🇶🇦` - 🇶🇦 Qatar
                * `🇷🇪` - 🇷🇪 Réunion
                * `🇷🇴` - 🇷🇴 Romania
                * `🇷🇺` - 🇷🇺 Russia
                * `🇷🇼` - 🇷🇼 Rwanda
                * `🇼🇸` - 🇼🇸 Samoa
                * `🇸🇲` - 🇸🇲 San Marino
                * `🇸🇹` - 🇸🇹 São Tomé & Príncipe
                * `🇸🇦` - 🇸🇦 Saudi Arabia
                * `🇸🇳` - 🇸🇳 Senegal
                * `🇷🇸` - 🇷🇸 Serbia
                * `🇸🇨` - 🇸🇨 Seychelles
                * `🇸🇱` - 🇸🇱 Sierra Leone
                * `🇸🇬` - 🇸🇬 Singapore
                * `🇸🇽` - 🇸🇽 Sint Maarten
                * `🇸🇰` - 🇸🇰 Slovakia
                * `🇸🇮` - 🇸🇮 Slovenia
                * `🇸🇧` - 🇸🇧 Solomon Islands
                * `🇸🇴` - 🇸🇴 Somalia
                * `🇿🇦` - 🇿🇦 South Africa
                * `🇬🇸` - 🇬🇸 South Georgia & South Sandwich Islands
                * `🇰🇷` - 🇰🇷 South Korea
                * `🇸🇸` - 🇸🇸 South Sudan
                * `🇪🇸` - 🇪🇸 Spain
                * `🇱🇰` - 🇱🇰 Sri Lanka
                * `🇧🇱` - 🇧🇱 St. Barthélemy
                * `🇸🇭` - 🇸🇭 St. Helena
                * `🇰🇳` - 🇰🇳 St. Kitts & Nevis
                * `🇱🇨` - 🇱🇨 St. Lucia
                * `🇲🇫` - 🇲🇫 St. Martin
                * `🇵🇲` - 🇵🇲 St. Pierre & Miquelon
                * `🇻🇨` - 🇻🇨 St. Vincent & Grenadines
                * `🇸🇩` - 🇸🇩 Sudan
                * `🇸🇷` - 🇸🇷 Suriname
                * `🇸🇯` - 🇸🇯 Svalbard & Jan Mayen
                * `🇸🇿` - 🇸🇿 Swaziland
                * `🇸🇪` - 🇸🇪 Sweden
                * `🇨🇭` - 🇨🇭 Switzerland
                * `🇸🇾` - 🇸🇾 Syria
                * `🇹🇼` - 🇹🇼 Taiwan
                * `🇹🇯` - 🇹🇯 Tajikistan
                * `🇹🇿` - 🇹🇿 Tanzania
                * `🇹🇭` - 🇹🇭 Thailand
                * `🇹🇱` - 🇹🇱 Timor-Leste
                * `🇹🇬` - 🇹🇬 Togo
                * `🇹🇰` - 🇹🇰 Tokelau
                * `🇹🇴` - 🇹🇴 Tonga
                * `🇹🇹` - 🇹🇹 Trinidad & Tobago
                * `🇹🇦` - 🇹🇦 Tristan Da Cunha
                * `🇹🇳` - 🇹🇳 Tunisia
                * `🇹🇷` - 🇹🇷 Turkey
                * `🇹🇲` - 🇹🇲 Turkmenistan
                * `🇹🇨` - 🇹🇨 Turks & Caicos Islands
                * `🇹🇻` - 🇹🇻 Tuvalu
                * `🇺🇬` - 🇺🇬 Uganda
                * `🇺🇦` - 🇺🇦 Ukraine
                * `🇦🇪` - 🇦🇪 United Arab Emirates
                * `🇬🇧` - 🇬🇧 United Kingdom
                * `🇺🇸` - 🇺🇸 United States
                * `🇺🇾` - 🇺🇾 Uruguay
                * `🇺🇲` - 🇺🇲 U.S. Outlying Islands
                * `🇻🇮` - 🇻🇮 U.S. Virgin Islands
                * `🇺🇿` - 🇺🇿 Uzbekistan
                * `🇻🇺` - 🇻🇺 Vanuatu
                * `🇻🇦` - 🇻🇦 Vatican City
                * `🇻🇪` - 🇻🇪 Venezuela
                * `🇻🇳` - 🇻🇳 Vietnam
                * `🇼🇫` - 🇼🇫 Wallis & Futuna
                * `🇪🇭` - 🇪🇭 Western Sahara
                * `🇾🇪` - 🇾🇪 Yemen
                * `🇿🇲` - 🇿🇲 Zambia
                * `🇿🇼` - 🇿🇼 Zimbabwe
                * `🔃` - 🔃 Clockwise Arrows
                * `🔄` - 🔄 Anticlockwise Arrows
                * `🔙` - 🔙 Back
                * `🔚` - 🔚 End
                * `🔛` - 🔛 On
                * `🔜` - 🔜 Soon
                * `🔝` - 🔝 Top
                * `🔰` - 🔰 Beginner
                * `🔮` - 🔮 Crystal Ball
                * `🔯` - 🔯 Six Pointed Star With Middle Dot
                * `✅` - ✅ White Heavy Check Mark
                * `❌` - ❌ Cross
                * `❎` - ❎ Negative Squared Cross Mark
                * `➕` - ➕ Heavy Plus Sign
                * `➖` - ➖ Heavy Minus Sign
                * `➗` - ➗ Heavy Division Sign
                * `➰` - ➰ Curly Loop
                * `➿` - ➿ Double Curly Loop
                * `❓` - ❓ Question
                * `❔` - ❔ White Question Mark Ornament
                * `❕` - ❕ White Exclamation Mark Ornament
                * `💯` - 💯 Hundred Points
                * `🔞` - 🔞 Over Eighteen
                * `🔠` - 🔠 Latin Capital Letters
                * `🔡` - 🔡 Latin Small Letters
                * `🔢` - 🔢 Numbers
                * `🔣` - 🔣 Symbols
                * `🔤` - 🔤 Latin Letters
                * `🅰️` - 🅰️ Squared A
                * `🆎` - 🆎 Squared AB
                * `🅱️` - 🅱️ Squared B
                * `🆑` - 🆑 Squared CL
                * `🆒` - 🆒 Cool Square
                * `🆓` - 🆓 Squared Free
                * `🆔` - 🆔 Squared ID
                * `🆕` - 🆕 New Square
                * `🆖` - 🆖 Squared NG
                * `🅾️` - 🅾️ Squared O
                * `🆗` - 🆗 OK Square
                * `🆘` - 🆘 SOS Square
                * `🆙` - 🆙 Squared Up!
                * `🆚` - 🆚 Squared Vs
                * `🈁` - 🈁 Squared Katakana Koko
                * `🈂️` - 🈂️ Squared Katakana Sa
                * `🈷️` - 🈷️ Squared 月 (Moon)
                * `🈶` - 🈶 Squared 有 (Have)
                * `🉐` - 🉐 Circled Ideograph Advantage
                * `🈹` - 🈹 Squared CJK Unified Ideograph-5272
                * `🈲` - 🈲 Squared CJK Unified Ideograph-7981
                * `🉑` - 🉑 Circled 可 (Accept)
                * `🈸` - 🈸 Squared CJK Unified Ideograph-7533
                * `🈴` - 🈴 Squared CJK Unified Ideograph-5408
                * `🈳` - 🈳 Squared CJK Unified Ideograph-7a7a
                * `🈺` - 🈺 Squared CJK Unified Ideograph-55b6
                * `🈵` - 🈵 Squared CJK Unified Ideograph-6e80
                * `🔶` - 🔶 Large Orange Diamond
                * `🔷` - 🔷 Large Blue Diamond
                * `🔸` - 🔸 Small Orange Diamond
                * `🔹` - 🔹 Small Blue Diamond
                * `🔺` - 🔺 Up-Pointing Red Triangle
                * `🔻` - 🔻 Down-Pointing Red Triangle
                * `💠` - 💠 Diamond Shape With a Dot Inside
                * `🔘` - 🔘 Radio Button
                * `🔲` - 🔲 Black Square Button
                * `🔳` - 🔳 White Square Button
                * `🔴` - 🔴 Large Red Circle
                * `🔵` - 🔵 Large Blue Circle
                * `😀` - 😀 Grinning
                * `😗` - 😗 Kissing
                * `😙` - 😙 Smooch
                * `😑` - 😑 True Neutral
                * `😮` - 😮 Stunned
                * `😯` - 😯 Hushed
                * `😴` - 😴 Sleepy
                * `😛` - 😛 Tongue
                * `😕` - 😕 Confused
                * `😟` - 😟 Worried
                * `😦` - 😦 Frowning Face With Open Mouth
                * `😧` - 😧 Anguish Face
                * `😬` - 😬 Grimace
                * `🙂` - 🙂 Slightly Smiling
                * `🙁` - 🙁 Slightly Frowning
                * `🕵` - 🕵 Spy
                * `🗣` - 🗣 Speaking Head in Silhouette
                * `🕴` - 🕴 Man in Business Suit Levitating
                * `🖕` - 🖕 Middle Finger
                * `🖖` - 🖖 Vulcan Hand
                * `🖐` - 🖐 Raised Hand With Fingers Splayed
                * `👁` - 👁 Eye
                * `🕳` - 🕳 Hole
                * `🗯` - 🗯 Right Anger Bubble
                * `🕶` - 🕶 Sunglasses
                * `🛍` - 🛍 Shopping
                * `🐿` - 🐿 Chipmunk
                * `🕊` - 🕊 Peace Dove
                * `🕷` - 🕷 Spider
                * `🕸` - 🕸 Spider Web
                * `🏵` - 🏵 Rosette
                * `🌶` - 🌶 Chilli
                * `🍽` - 🍽 Fork and Knife With Plate
                * `🗺` - 🗺 World Map
                * `🏔` - 🏔 Snow Capped Mountain
                * `🏕` - 🏕 Camping
                * `🏖` - 🏖 Beach
                * `🏜` - 🏜 Desert
                * `🏝` - 🏝 Desert Island
                * `🏞` - 🏞 National Park
                * `🏟` - 🏟 Stadium
                * `🏛` - 🏛 Architecture
                * `🏗` - 🏗 Building Construction
                * `🏘` - 🏘 House Buildings
                * `🏙` - 🏙 Cityscape
                * `🏚` - 🏚 Derelict House Building
                * `🖼` - 🖼 Frame With Picture
                * `🛢` - 🛢 Oil Drum
                * `🛣` - 🛣 Motorway
                * `🛤` - 🛤 Railway Track
                * `🛳` - 🛳 Passenger Ship
                * `🛥` - 🛥 Boat
                * `🛩` - 🛩 Airplane
                * `🛫` - 🛫 Airplane Departure
                * `🛬` - 🛬 Airplane Arriving
                * `🛰` - 🛰 Satellite
                * `🛎` - 🛎 Service Bell
                * `🛌` - 🛌 Bed
                * `🛏` - 🛏 Bed
                * `🛋` - 🛋 Couch and Lamp
                * `🕰` - 🕰 Mantelpiece
                * `🌡` - 🌡 Thermometer
                * `🌤` - 🌤 Small Cloud
                * `🌥` - 🌥 White Sun Behind Cloud
                * `🌦` - 🌦 White Sun Behind Cloud With Rain
                * `🌧` - 🌧 Cloud With Rain
                * `🌨` - 🌨 Cloud With Snow
                * `🌩` - 🌩 Lightning
                * `🌪` - 🌪 Tornado
                * `🌫` - 🌫 Fog
                * `🌬` - 🌬 Blowing
                * `🎖` - 🎖 Medal
                * `🎗` - 🎗 Ribbon
                * `🎞` - 🎞 Film
                * `🎟` - 🎟 Admission Tickets
                * `🏷` - 🏷 Label
                * `🏌` - 🏌 Golfer
                * `🏋` - 🏋 Lifting
                * `🏎` - 🏎 Racing Car
                * `🏍` - 🏍 Racing Motorcycle
                * `🏅` - 🏅 Medal
                * `🕹` - 🕹 Joystick
                * `⏸` - ⏸ Double Vertical Bar
                * `⏹` - ⏹ Black Square for Stop
                * `⏺` - ⏺ Black Circle for Record
                * `🎙` - 🎙 Microphone
                * `🎚` - 🎚 Level Slider
                * `🎛` - 🎛 Control Knobs
                * `🖥` - 🖥 Desktop
                * `🖨` - 🖨 Printer
                * `🖱` - 🖱 Three Button Mouse
                * `🖲` - 🖲 Trackball
                * `📽` - 📽 Film Projector
                * `📸` - 📸 Camera With Flash
                * `🕯` - 🕯 Candle
                * `🗞` - 🗞 Newspaper
                * `🗳` - 🗳 Ballot Box With Ballot
                * `🖋` - 🖋 Fancy Pen
                * `🖊` - 🖊 Lower Left Ballpoint Pen
                * `🖌` - 🖌 Lower Left Paintbrush
                * `🖍` - 🖍 Lower Left Crayon
                * `🗂` - 🗂 Card Index Dividers
                * `🗒` - 🗒 Spiral Note Pad
                * `🗓` - 🗓 Spiral Calendar Pad
                * `🖇` - 🖇 Linked Paperclips
                * `🗃` - 🗃 Card File Box
                * `🗄` - 🗄 File Cabinet
                * `🗑` - 🗑 Wastebasket
                * `🗝` - 🗝 Old Key
                * `🛠` - 🛠 Tools
                * `🗜` - 🗜 Compression
                * `🗡` - 🗡 Dagger
                * `🛡` - 🛡 Shield
                * `🏳` - 🏳 White Flag
                * `🏴` - 🏴 Black Flag
                * `🕉` - 🕉 Om Symbol
                * `🗨` - 🗨 Left Speech Bubble
                * `🤗` - 🤗 Hugging
                * `🤔` - 🤔 Thinking
                * `🙄` - 🙄 Rolling Eyes
                * `🤐` - 🤐 Hushed
                * `🤓` - 🤓 Nerd
                * `🙃` - 🙃 Upside Down
                * `🤒` - 🤒 Sick
                * `🤕` - 🤕 Hurt Head
                * `🤑` - 🤑 Money
                * `🏻` - 🏻 Emoji Modifier 1-2
                * `🏼` - 🏼 Emoji Modifier 3
                * `🏽` - 🏽 Emoji Modifier 4
                * `🏾` - 🏾 Emoji Modifier 5
                * `🏿` - 🏿 Emoji Modifier 6
                * `🤘` - 🤘 Rock On
                * `📿` - 📿 Prayer Beads
                * `🤖` - 🤖 Robot
                * `🦁` - 🦁 Lion
                * `🦄` - 🦄 Unicorn
                * `🦃` - 🦃 Turkey
                * `🦀` - 🦀 Crab
                * `🦂` - 🦂 Scorpion
                * `🧀` - 🧀 Cheese
                * `🌭` - 🌭 Hot Dog
                * `🌮` - 🌮 Taco
                * `🌯` - 🌯 Burrito
                * `🍿` - 🍿 Popcorn
                * `🍾` - 🍾 Popping Cork
                * `🏺` - 🏺 Amphora
                * `🛐` - 🛐 Place of Worship
                * `🕋` - 🕋 Kaaba
                * `🕌` - 🕌 Mosque
                * `🕍` - 🕍 Synagogue
                * `🕎` - 🕎 Menorah
                * `🏏` - 🏏 Bat and Ball
                * `🏐` - 🏐 Volleyball
                * `🏑` - 🏑 Field Hockey
                * `🏒` - 🏒 Ice Hockey
                * `🏓` - 🏓 Table Tennis
                * `🏸` - 🏸 Badminton
                * `🏹` - 🏹 Archer
                * `🤣` - 🤣 ROFL Face
                * `🤤` - 🤤 Drooling
                * `🤢` - 🤢 Nauseated
                * `🤧` - 🤧 Sneezing
                * `🤠` - 🤠 Cowboy
                * `🤡` - 🤡 Clown
                * `🤥` - 🤥 Lying
                * `🤴` - 🤴 Prince
                * `🤵` - 🤵 Tuxedo Man
                * `🤰` - 🤰 Pregnant
                * `🤶` - 🤶 Mrs. Claus
                * `🤦` - 🤦 Facepalm
                * `🤷` - 🤷 Shrugging
                * `🕺` - 🕺 Man Dancing
                * `🤺` - 🤺 Fencing
                * `🤸` - 🤸 Cartwheel
                * `🤼` - 🤼 Wrestling
                * `🤽` - 🤽 Water Polo
                * `🤾` - 🤾 Handball
                * `🤹` - 🤹 Juggling
                * `🤳` - 🤳 Selfie
                * `🤞` - 🤞 Luck Hand
                * `🤙` - 🤙 Call Me Hand
                * `🤛` - 🤛 Left-Facing Fist
                * `🤜` - 🤜 Right-Facing Fist
                * `🤚` - 🤚 Raised Back of Hand
                * `🤝` - 🤝 Business Hi
                * `🖤` - 🖤 Black Heart
                * `🦍` - 🦍 Gorilla
                * `🦊` - 🦊 Fox
                * `🦌` - 🦌 Deer
                * `🦏` - 🦏 Rhinoceros
                * `🦇` - 🦇 Bat
                * `🦅` - 🦅 Eagle
                * `🦆` - 🦆 Duck
                * `🦉` - 🦉 Owl
                * `🦎` - 🦎 Lizard
                * `🦈` - 🦈 Shark
                * `🦐` - 🦐 Shrimp
                * `🦑` - 🦑 Squid
                * `🦋` - 🦋 Butterfly
                * `🥀` - 🥀 Wilted
                * `🥝` - 🥝 Kiwifruit
                * `🥑` - 🥑 Pricey Fruit
                * `🥔` - 🥔 Potato
                * `🥕` - 🥕 Carrot
                * `🥒` - 🥒 Cucumber
                * `🥜` - 🥜 Peanuts
                * `🥐` - 🥐 Croissant
                * `🥖` - 🥖 Bread Sword
                * `🥞` - 🥞 Pancakes
                * `🥓` - 🥓 Bacon
                * `🥙` - 🥙 Stuffed Flatbread
                * `🥚` - 🥚 Chicken Rock
                * `🥘` - 🥘 Shallow Pan
                * `🥗` - 🥗 Salad
                * `🥛` - 🥛 Cow Juice
                * `🥂` - 🥂 Clinking Glasses
                * `🥃` - 🥃 Tumbler
                * `🥄` - 🥄 Spoon
                * `🛴` - 🛴 Scoot Scoot
                * `🛵` - 🛵 Motor Scooter
                * `🛑` - 🛑 Stop Sign
                * `🛶` - 🛶 Canoe
                * `🥇` - 🥇 Gold Medal
                * `🥈` - 🥈 Silver Medal
                * `🥉` - 🥉 Participation
                * `🥊` - 🥊 Boxing
                * `🥋` - 🥋 Martial Arts
                * `🥅` - 🥅 Hashtag Goals
                * `🥁` - 🥁 Drum Roll
                * `🛒` - 🛒 Food Ute
                * `🤩` - 🤩 Star Struck
                * `🤨` - 🤨 Unexpected Face
                * `🤯` - 🤯 Mind Blown
                * `🤪` - 🤪 Zany Face
                * `🤬` - 🤬 Swear Face
                * `🤮` - 🤮 Vomiting
                * `🤫` - 🤫 Shushing
                * `🤭` - 🤭 Hand Over Mouth
                * `🧐` - 🧐 Monocle
                * `🧒` - 🧒 Child Face
                * `🧑` - 🧑 Adult
                * `🧓` - 🧓 Older Adult
                * `🧕` - 🧕 Headscarf
                * `🧔` - 🧔 Bearded Person
                * `🤱` - 🤱 Breast Feeding
                * `🧙` - 🧙 Mage
                * `🧚` - 🧚 Fairy
                * `🧛` - 🧛 Vampire
                * `🧜` - 🧜 Merperson
                * `🧝` - 🧝 Cosplay
                * `🧞` - 🧞 Genie
                * `🧟` - 🧟 Unalive
                * `🧖` - 🧖 Steamy Room
                * `🧗` - 🧗 Person Climbing
                * `🧘` - 🧘 Lotus Position
                * `🤟` - 🤟 Love-You Gesture
                * `🤲` - 🤲 Palms Up Together
                * `🧠` - 🧠 Big Brain
                * `🧡` - 🧡 Orange Heart
                * `🧣` - 🧣 Neck Hider
                * `🧤` - 🧤 Hand Socks
                * `🧥` - 🧥 Coat
                * `🧦` - 🧦 Feet Gloves
                * `🧢` - 🧢 Billed Cap
                * `🦓` - 🦓 Zebra
                * `🦒` - 🦒 Giraffe
                * `🦔` - 🦔 Spikehog
                * `🦕` - 🦕 Long Neck
                * `🦖` - 🦖 Big Roar
                * `🦗` - 🦗 Cricket
                * `🥥` - 🥥 Coconut
                * `🥦` - 🥦 Tiny Tree
                * `🥨` - 🥨 Twisty Bread
                * `🥩` - 🥩 Cut of Meat
                * `🥪` - 🥪 Sandwich
                * `🥣` - 🥣 Bowl With Spoon
                * `🥫` - 🥫 Canned Good
                * `🥟` - 🥟 Dumpling
                * `🥠` - 🥠 Tasty Future
                * `🥡` - 🥡 Takeout Box
                * `🥧` - 🥧 Pie
                * `🥤` - 🥤 Cup With Straw
                * `🥢` - 🥢 Chopsticks
                * `🛸` - 🛸 Alien Plane
                * `🛷` - 🛷 Sled
                * `🥌` - 🥌 Curling
                * `🥰` - 🥰 Smiling Face With 3 Hearts
                * `🥵` - 🥵 Overheated
                * `🥶` - 🥶 Freezing Face
                * `🥴` - 🥴 Woozy Face
                * `🥳` - 🥳 Party Face
                * `🥺` - 🥺 Pleading Face
                * `🦵` - 🦵 Leg
                * `🦶` - 🦶 Foot
                * `🦷` - 🦷 Tooth
                * `🦴` - 🦴 Bone
                * `🦸` - 🦸 Superhero
                * `🦹` - 🦹 Supervillain
                * `🦝` - 🦝 Trash Bandit
                * `🦙` - 🦙 Llama
                * `🦛` - 🦛 Hippopotamus
                * `🦘` - 🦘 Kangaroo
                * `🦡` - 🦡 Badger
                * `🦢` - 🦢 Swan
                * `🦚` - 🦚 Peacock
                * `🦜` - 🦜 Parrot
                * `🦟` - 🦟 Mosquito
                * `🦠` - 🦠 Microbe
                * `🥭` - 🥭 Mango
                * `🥬` - 🥬 Leafy Green
                * `🥯` - 🥯 Bagel
                * `🧂` - 🧂 Salty
                * `🥮` - 🥮 Moon Cake
                * `🦞` - 🦞 Lobster
                * `🧁` - 🧁 Cupcake
                * `🧭` - 🧭 Compass
                * `🧱` - 🧱 Brick
                * `🛹` - 🛹 Skateboard
                * `🧳` - 🧳 Baggage
                * `🧨` - 🧨 Firework
                * `🧧` - 🧧 Red Envelope
                * `🥎` - 🥎 Softball
                * `🥏` - 🥏 Throwing Disc
                * `🥍` - 🥍 Lacrosse
                * `🧿` - 🧿 Nazar Amulet
                * `🧩` - 🧩 Puzzle Piece
                * `🧸` - 🧸 Teddy Bear
                * `🧵` - 🧵 Thread
                * `🧶` - 🧶 Yarn Ball
                * `🥽` - 🥽 The Goggles
                * `🥼` - 🥼 Lab Coat
                * `🥾` - 🥾 Hiking Boot
                * `🥿` - 🥿 Flat Shoe
                * `🧮` - 🧮 Abacus
                * `🧾` - 🧾 Receipt
                * `🧰` - 🧰 Toolbox
                * `🧲` - 🧲 Magnet
                * `🧪` - 🧪 Test Tube
                * `🧫` - 🧫 Petri Dish
                * `🧬` - 🧬 DNA
                * `🧴` - 🧴 Lotion
                * `🧷` - 🧷 Safety Pin
                * `🧹` - 🧹 Broom
                * `🧺` - 🧺 Basket
                * `🧻` - 🧻 Roll of Paper
                * `🧼` - 🧼 Soap
                * `🧽` - 🧽 Fun sponge
                * `🧯` - 🧯 Anti-fire Can
                * `🥱` - 🥱 Yawning Face
                * `🤎` - 🤎 Brown Heart
                * `🤍` - 🤍 White Heart
                * `🤏` - 🤏 Pinching Hand
                * `🦾` - 🦾 Mechanical Arm
                * `🦿` - 🦿 Mechanical Leg
                * `🦻` - 🦻 Ear with Hearing Aid
                * `🧏` - 🧏 Deaf Person
                * `🧍` - 🧍 Person Standing
                * `🧎` - 🧎 Person Kneeling
                * `🦧` - 🦧 Orangutan
                * `🦮` - 🦮 Guide Dog
                * `🦥` - 🦥 Lazy Tree Dog
                * `🦦` - 🦦 Water Dog
                * `🦨` - 🦨 Stinky dog
                * `🦩` - 🦩 Pink Dog
                * `🧄` - 🧄 Garlic
                * `🧅` - 🧅 Onion
                * `🧇` - 🧇 Waffle
                * `🧆` - 🧆 Falafel
                * `🧈` - 🧈 Butter
                * `🦪` - 🦪 Oyster
                * `🧃` - 🧃 Beverage Box
                * `🧉` - 🧉 Mate
                * `🧊` - 🧊 Cold Cuboid
                * `🛕` - 🛕 Hindu Temple
                * `🦽` - 🦽 Manual Wheelchair
                * `🦼` - 🦼 Motorized Wheelchair
                * `🛺` - 🛺 Auto Rickshaw
                * `🪂` - 🪂 Parachute
                * `🪐` - 🪐 Ringed Planet
                * `🤿` - 🤿 Diving Mask
                * `🪀` - 🪀 Yo-Yo
                * `🪁` - 🪁 Kite
                * `🦺` - 🦺 Safety Vest
                * `🥻` - 🥻 Sari
                * `🩱` - 🩱 One-Piece Swimsuit
                * `🩲` - 🩲 Briefs
                * `🩳` - 🩳 Shorts
                * `🩰` - 🩰 Ballet Shoes
                * `🪕` - 🪕 Banjo
                * `🪔` - 🪔 Diya Lamp
                * `🪓` - 🪓 Axe
                * `🦯` - 🦯 White Cane
                * `🩸` - 🩸 Drop of Blood
                * `🩹` - 🩹 Adhesive Bandage
                * `🩺` - 🩺 Stethoscope
                * `🪑` - 🪑 Chair
                * `🪒` - 🪒 Razor
                * `🟠` - 🟠 Orange Circle
                * `🟡` - 🟡 Yellow Circle
                * `🟢` - 🟢 Green Circle
                * `🟣` - 🟣 Purple Circle
                * `🟤` - 🟤 Brown Circle
                * `🟥` - 🟥 Red Square
                * `🟧` - 🟧 Orange Square
                * `🟨` - 🟨 Yellow Square
                * `🟩` - 🟩 Green Square
                * `🟦` - 🟦 Blue Square
                * `🟪` - 🟪 Purple Square
                * `🟫` - 🟫 Brown Square
                * `🥲` - 🥲 Smiling Face with Tear
                * `🥸` - 🥸 Disguised Face
                * `🤌` - 🤌 Pinched Fingers
                * `🫀` - 🫀 Anatomical Heart
                * `🫁` - 🫁 Lungs
                * `🥷` - 🥷 Ninja
                * `🫂` - 🫂 People Hugging
                * `🦬` - 🦬 Bison
                * `🦣` - 🦣 Mammoth
                * `🦫` - 🦫 Beaver
                * `🦤` - 🦤 Dodo
                * `🪶` - 🪶 Feather
                * `🦭` - 🦭 Seal
                * `🪲` - 🪲 Beetle
                * `🪳` - 🪳 Cockroach
                * `🪰` - 🪰 Fly
                * `🪱` - 🪱 Worm
                * `🪴` - 🪴 Potted Plant
                * `🫐` - 🫐 Blueberries
                * `🫒` - 🫒 Olive
                * `🫑` - 🫑 Bell Pepper
                * `🫓` - 🫓 Flatbread
                * `🫔` - 🫔 Tamale
                * `🫕` - 🫕 Fondue
                * `🫖` - 🫖 Teapot
                * `🧋` - 🧋 Bubble Tea
                * `🪨` - 🪨 Rock
                * `🪵` - 🪵 Wood
                * `🛖` - 🛖 Hut
                * `🛻` - 🛻 Pickup Truck
                * `🛼` - 🛼 Roller Skate
                * `🪄` - 🪄 Magic Wand
                * `🪅` - 🪅 Piñata
                * `🪆` - 🪆 Nesting Dolls
                * `🪡` - 🪡 Sewing Needle
                * `🪢` - 🪢 Knot
                * `🩴` - 🩴 Thong Sandal
                * `🪖` - 🪖 Military Helmet
                * `🪗` - 🪗 Accordion
                * `🪘` - 🪘 Long Drum
                * `🪙` - 🪙 Coin
                * `🪃` - 🪃 Boomerang
                * `🪚` - 🪚 Carpentry Saw
                * `🪛` - 🪛 Screwdriver
                * `🪝` - 🪝 Hook
                * `🪜` - 🪜 Ladder
                * `🛗` - 🛗 Elevator
                * `🪞` - 🪞 Mirror
                * `🪟` - 🪟 Window
                * `🪠` - 🪠 Plunger
                * `🪤` - 🪤 Mouse Trap
                * `🪣` - 🪣 Bucket
                * `🪥` - 🪥 Toothbrush
                * `🪦` - 🪦 Headstone
                * `🪧` - 🪧 Placard
                * `😶‍🌫` - 😶‍🌫 Cloudy Face
                * `😮‍💨` - 😮‍💨 Hot Air
                * `😵‍💫` - 😵‍💫 Hypnotised
                * `❤‍🔥` - ❤‍🔥 Fiery Heart
                * `❤‍🩹` - ❤‍🩹 Mending Heart
                * `🧔‍♂` - 🧔‍♂ Bearded Man
                * `🧔‍♀` - 🧔‍♀ Bearded Woman
                * `🫠` - 🫠 Melting Face
                * `🫢` - 🫢 Oops Face
                * `🫣` - 🫣 Peekaboo
                * `🫡` - 🫡 Saluting Face
                * `🫥` - 🫥 Invisible Face
                * `🫤` - 🫤 Diagonal Mouth
                * `🥹` - 🥹 Grateful Face
                * `🫱` - 🫱 Rightwards Hand
                * `🫲` - 🫲 Leftwards Hand
                * `🫳` - 🫳 Palm Down Hand
                * `🫴` - 🫴 Palm Up Hand
                * `🫰` - 🫰 Love Gesture
                * `🫵` - 🫵 YOU
                * `🫶` - 🫶 Heart Hands
                * `🫦` - 🫦 Biting Lip
                * `🫅` - 🫅 Crowned
                * `🫃` - 🫃 Pregnant Man
                * `🫄` - 🫄 Pregnant Person
                * `🧌` - 🧌 Bridgekeeper
                * `🪸` - 🪸 Coral
                * `🪷` - 🪷 Lotus
                * `🪹` - 🪹 Empty Nest
                * `🪺` - 🪺 Unladen Swallow
                * `🫘` - 🫘 Beans
                * `🫗` - 🫗 Leak
                * `🫙` - 🫙 Jar
                * `🛝` - 🛝 Slide
                * `🛞` - 🛞 Wheel
                * `🛟` - 🛟 Buoy
                * `🪩` - 🪩 Mirror Ball
                * `🪫` - 🪫 Low Battery
                * `🩼` - 🩼 Crutch
                * `🩻` - 🩻 X-Ray
                * `🫧` - 🫧 Bubbles
                * `🪬` - 🪬 Hamsa
                * `🪪` - 🪪 Identification Card
                * `🟰` - 🟰 Heavy Equals Sign
                * `🫨` - 🫨 Car Sick Face
                * `🩷` - 🩷 Pink Heart
                * `🩵` - 🩵 Light Blue Heart
                * `🩶` - 🩶 Grey Heart
                * `🫷` - 🫷 No Thanks Hand
                * `🫸` - 🫸 Rightwards Pushing Hand
                * `🫎` - 🫎 Moose
                * `🫏` - 🫏 Donkey
                * `🪽` - 🪽 Wing
                * `🪿` - 🪿 Honking Bird
                * `🪼` - 🪼 Jellyfish
                * `🪻` - 🪻 Hyacinth
                * `🫚` - 🫚 Ginger
                * `🫛` - 🫛 Pea Pod
                * `🪭` - 🪭 Folding Hand Fan
                * `🪮` - 🪮 Hair Pick
                * `🪇` - 🪇 Maracas
                * `🪈` - 🪈 Flute
                * `🪯` - 🪯 Khanda
                * `🛜` - 🛜 Wireless
                * `🙂‍↔` - 🙂‍↔ Headshake
                * `🙂‍↕` - 🙂‍↕ Nodding Face
                * `🚶‍➡` - 🚶‍➡ Walking
                * `🧎‍➡` - 🧎‍➡ Person Kneeling
                * `🏃‍➡` - 🏃‍➡ Person Running
                * `🐦‍🔥` - 🐦‍🔥 Phoenix
                * `🍋‍🟩` - 🍋‍🟩 Lime
                * `🍄‍🟫` - 🍄‍🟫 Brown Mushroom
                * `⛓‍💥` - ⛓‍💥 Broken Chain
        Feedback:
            type: object
            description: |-
                Mixin that provides retrieval of appropriate fields for the Submission
                instance, used with forms that are submitted by tabroom officials. It is up
                to subclasses to use get_submitter_fields() appropriately.
            properties:
                id:
                    type: integer
                    readOnly: true
                url:
                    type: string
                    format: uri
                    readOnly: true
                adjudicator:
                    type: string
                    format: uri
                source:
                    type: string
                    format: uri
                participant_submitter:
                    type: string
                    format: uri
                    nullable: true
                debate:
                    type: string
                    format: uri
                answers:
                    type: array
                    items:
                        $ref: "#/components/schemas/FeedbackAnswer"
                timestamp:
                    type: string
                    format: date-time
                    readOnly: true
                version:
                    type: integer
                    readOnly: true
                submitter_type:
                    allOf:
                        - $ref: "#/components/schemas/SubmitterTypeEnum"
                    readOnly: true
                confirmed:
                    type: boolean
                private_url:
                    type: boolean
                    readOnly: true
                    title: From private URL
                confirm_timestamp:
                    type: string
                    format: date-time
                    readOnly: true
                    nullable: true
                ip_address:
                    type: string
                    readOnly: true
                    nullable: true
                score:
                    type: number
                    format: double
                ignored:
                    type: boolean
                    description: Whether the feedback should affect the adjudicator's score
                submitter:
                    type: integer
                    readOnly: true
                    nullable: true
                confirmer:
                    type: integer
                    readOnly: true
                    nullable: true
            required:
                - adjudicator
                - confirm_timestamp
                - confirmer
                - debate
                - id
                - ip_address
                - participant_submitter
                - private_url
                - score
                - source
                - submitter
                - submitter_type
                - timestamp
                - url
                - version
        FeedbackAnswer:
            type: object
            properties:
                question:
                    type: string
                    format: uri
                answer:
                    anyOf:
                        - type: number
                        - type: boolean
                        - type: string
                        - type: array
                          items:
                              type: string
            required:
                - answer
                - question
        FeedbackQuestion:
            type: object
            properties:
                id:
                    type: integer
                    readOnly: true
                url:
                    type: string
                    format: uri
                    readOnly: true
                seq:
                    type: integer
                    maximum: 2147483647
                    minimum: -2147483648
                    title: Sequence number
                    description: The order in which questions are displayed
                text:
                    type: string
                    description:
                        The question displayed to participants, e.g., "Did you agree
                        with the decision?"
                    maxLength: 255
                name:
                    type: string
                    description: A short name for the question, e.g., "Agree with decision"
                    maxLength: 30
                reference:
                    type: string
                    description: Code-compatible reference, e.g., "agree_with_decision"
                    maxLength: 50
                    pattern: ^[-a-zA-Z0-9_]+$
                from_adj:
                    type: boolean
                    title: From adjudicator
                    description: Adjudicators should be asked this question (about other adjudicators)
                from_team:
                    type: boolean
                    description: Teams should be asked this question
                answer_type:
                    $ref: "#/components/schemas/AnswerTypeEnum"
                required:
                    type: boolean
                    description: Whether participants are required to fill out this field
                min_value:
                    type: number
                    format: double
                    nullable: true
                    title: Minimum value
                    description:
                        Minimum allowed value for numeric fields (ignored for text
                        or boolean fields)
                max_value:
                    type: number
                    format: double
                    nullable: true
                    title: Maximum value
                    description:
                        Maximum allowed value for numeric fields (ignored for text
                        or boolean fields)
                choices:
                    type: array
                    items:
                        type: string
                    description:
                        Permissible choices for select one/multiple fields (ignored
                        for other fields)
            required:
                - answer_type
                - from_adj
                - from_team
                - id
                - name
                - reference
                - seq
                - text
                - url
        GenderEnum:
            enum:
                - M
                - F
                - O
            type: string
            description: |-
                * `M` - male
                * `F` - female
                * `O` - other
        Group:
            type: object
            properties:
                id:
                    type: integer
                    readOnly: true
                url:
                    type: string
                    format: uri
                    readOnly: true
                name:
                    type: string
                    maxLength: 100
                permissions:
                    type: array
                    items:
                        $ref: "#/components/schemas/PermissionsEnum"
                users:
                    type: array
                    items:
                        type: integer
                    readOnly: true
            required:
                - id
                - name
                - url
                - users
        Institution:
            type: object
            properties:
                id:
                    type: integer
                    readOnly: true
                url:
                    type: string
                    format: uri
                    readOnly: true
                region:
                    type: string
                    nullable: true
                venue_constraints:
                    type: array
                    items:
                        $ref: "#/components/schemas/VenueConstraint"
                name:
                    type: string
                    description:
                        The institution's full name, e.g., "University of Cambridge",
                        "Victoria University of Wellington"
                    maxLength: 100
                code:
                    type: string
                    description:
                        What the institution is typically called for short, e.g., "Cambridge",
                        "Vic Wellington"
                    maxLength: 20
            required:
                - code
                - id
                - name
                - url
        Motion:
            type: object
            properties:
                id:
                    type: integer
                    readOnly: true
                url:
                    type: string
                    format: uri
                    readOnly: true
                rounds:
                    type: array
                    items:
                        $ref: "#/components/schemas/Rounds"
                info_slide_plain:
                    type: string
                    readOnly: true
                text:
                    type: string
                    description: The full motion e.g., "This House would straighten all bananas"
                    maxLength: 500
                reference:
                    type: string
                    description: Shortcode for the motion, e.g., "Bananas"
                    maxLength: 100
                info_slide:
                    type: string
                    description: The information slide for this topic; if it has one
            required:
                - id
                - info_slide_plain
                - reference
                - rounds
                - text
                - url
        NullEnum:
            enum:
                - null
        PaginatedAdjudicatorList:
            type: array
            items:
                $ref: "#/components/schemas/Adjudicator"
        PaginatedBallotList:
            type: array
            items:
                $ref: "#/components/schemas/Ballot"
        PaginatedBreakCategoryList:
            type: array
            items:
                $ref: "#/components/schemas/BreakCategory"
        PaginatedFeedbackList:
            type: array
            items:
                $ref: "#/components/schemas/Feedback"
        PaginatedFeedbackQuestionList:
            type: array
            items:
                $ref: "#/components/schemas/FeedbackQuestion"
        PaginatedGroupList:
            type: array
            items:
                $ref: "#/components/schemas/Group"
        PaginatedInstitutionList:
            type: array
            items:
                $ref: "#/components/schemas/Institution"
        PaginatedMotionList:
            type: array
            items:
                $ref: "#/components/schemas/Motion"
        PaginatedPerTournamentInstitutionList:
            type: array
            items:
                $ref: "#/components/schemas/PerTournamentInstitution"
        PaginatedPreferenceList:
            type: array
            items:
                $ref: "#/components/schemas/Preference"
        PaginatedPreformedPanelList:
            type: array
            items:
                $ref: "#/components/schemas/PreformedPanel"
        PaginatedRoundList:
            type: array
            items:
                $ref: "#/components/schemas/Round"
        PaginatedRoundPairingList:
            type: array
            items:
                $ref: "#/components/schemas/RoundPairing"
        PaginatedScoreCriterionList:
            type: array
            items:
                $ref: "#/components/schemas/ScoreCriterion"
        PaginatedSpeakerCategoryList:
            type: array
            items:
                $ref: "#/components/schemas/SpeakerCategory"
        PaginatedSpeakerList:
            type: array
            items:
                $ref: "#/components/schemas/Speaker"
        PaginatedSpeakerRoundScoresList:
            type: array
            items:
                $ref: "#/components/schemas/SpeakerRoundScores"
        PaginatedSpeakerStandingsList:
            type: array
            items:
                $ref: "#/components/schemas/SpeakerStandings"
        PaginatedTeamList:
            type: array
            items:
                $ref: "#/components/schemas/Team"
        PaginatedTeamRoundScoresList:
            type: array
            items:
                $ref: "#/components/schemas/TeamRoundScores"
        PaginatedTeamStandingsList:
            type: array
            items:
                $ref: "#/components/schemas/TeamStandings"
        PaginatedTournamentList:
            type: array
            items:
                $ref: "#/components/schemas/Tournament"
        PaginatedUserList:
            type: array
            items:
                $ref: "#/components/schemas/User"
        PaginatedVenueCategoryList:
            type: array
            items:
                $ref: "#/components/schemas/VenueCategory"
        PaginatedVenueList:
            type: array
            items:
                $ref: "#/components/schemas/Venue"
        PairingLinks:
            type: object
            properties:
                ballots:
                    type: string
                    format: uri
                    readOnly: true
            required:
                - ballots
        PatchedAdjudicator:
            type: object
            properties:
                id:
                    type: integer
                    readOnly: true
                url:
                    type: string
                    format: uri
                    readOnly: true
                name:
                    type: string
                institution:
                    type: string
                    format: uri
                    nullable: true
                institution_conflicts:
                    type: array
                    items:
                        type: string
                        format: uri
                team_conflicts:
                    type: array
                    items:
                        type: string
                        format: uri
                adjudicator_conflicts:
                    type: array
                    items:
                        type: string
                        format: uri
                venue_constraints:
                    type: array
                    items:
                        $ref: "#/components/schemas/VenueConstraint"
                _links:
                    allOf:
                        - $ref: "#/components/schemas/AdjudicatorLinks"
                    readOnly: true
                    title: " links"
                barcode:
                    type: string
                    readOnly: true
                email:
                    type: string
                    format: email
                    nullable: true
                    title: Email address
                    maxLength: 254
                phone:
                    type: string
                    maxLength: 40
                anonymous:
                    type: boolean
                    description:
                        Anonymous persons will have their name and team redacted on
                        public tab releases
                code_name:
                    type: string
                    description: Name used to obscure real name on public-facing pages
                    maxLength: 25
                url_key:
                    type: string
                    nullable: true
                    maxLength: 24
                    pattern: ^[-a-zA-Z0-9_]+$
                gender:
                    description: |-
                        Gender is displayed in the adjudicator allocation interface, and nowhere else

                        * `M` - male
                        * `F` - female
                        * `O` - other
                    oneOf:
                        - $ref: "#/components/schemas/GenderEnum"
                        - $ref: "#/components/schemas/BlankEnum"
                pronoun:
                    type: string
                    description:
                        If printing ballots using Tabbycat, there is the option to
                        pre-print pronouns
                    maxLength: 10
                base_score:
                    type: number
                    format: double
                trainee:
                    type: boolean
                    title: Always trainee
                    description:
                        If checked, this adjudicator will never be auto-allocated a
                        voting position, regardless of their score
                breaking:
                    type: boolean
                independent:
                    type: boolean
                adj_core:
                    type: boolean
                    title: Adjudication core
        PatchedBreakCategory:
            type: object
            properties:
                id:
                    type: integer
                    readOnly: true
                url:
                    type: string
                    format: uri
                    readOnly: true
                _links:
                    allOf:
                        - $ref: "#/components/schemas/BreakCategoryLinks"
                    readOnly: true
                    title: " links"
                name:
                    type: string
                    description: Name to be displayed, e.g., "ESL"
                    maxLength: 50
                slug:
                    type: string
                    description: Slug for URLs, e.g., "esl"
                    maxLength: 50
                    pattern: ^[-a-zA-Z0-9_]+$
                seq:
                    type: integer
                    maximum: 2147483647
                    minimum: -2147483648
                    title: Sequence number
                    description: The order in which the categories are displayed
                break_size:
                    type: integer
                    maximum: 2147483647
                    minimum: 2
                    description: Number of breaking teams in this category
                is_general:
                    type: boolean
                    description: Are teams eligible for this break by default
                priority:
                    type: integer
                    maximum: 2147483647
                    minimum: -2147483648
                    description:
                        If a team breaks in multiple categories, higher priority numbers
                        take precedence; teams can break into multiple categories if and only
                        if they all have the same priority
                limit:
                    type: integer
                    maximum: 2147483647
                    minimum: -2147483648
                    description:
                        At most this many teams will be shown on the public tab for
                        this category, or use 0 for no limit
                rule:
                    allOf:
                        - $ref: "#/components/schemas/RuleEnum"
                    description: |-
                        Rule for how the break is calculated (most tournaments should use "Standard")

                        * `standard` - Standard
                        * `aida-1996` - AIDA 1996
                        * `aida-2016-easters` - AIDA 2016 (Easters)
                        * `aida-2016-australs` - AIDA 2016 (Australs)
                        * `aida-2019-australs-open` - AIDA 2019 (Australs, Dynamic Cap)
        PatchedBreakEligibility:
            type: object
            properties:
                slug:
                    type: string
                    readOnly: true
                    description: Slug for URLs, e.g., "esl"
                    pattern: ^[-a-zA-Z0-9_]+$
                team_set:
                    type: array
                    items:
                        type: string
                        format: uri
        PatchedBreakingTeam:
            type: object
            properties:
                team:
                    type: string
                    format: uri
                rank:
                    type: integer
                    maximum: 2147483647
                    minimum: -2147483648
                break_rank:
                    type: integer
                    maximum: 2147483647
                    minimum: -2147483648
                    nullable: true
                remark:
                    nullable: true
                    description: |-
                        Used to explain why an otherwise-qualified team didn't break

                        * `C` - Capped
                        * `I` - Ineligible
                        * `D` - Different break
                        * `d` - Disqualified
                        * `t` - Lost coin toss
                        * `w` - Withdrawn
                    oneOf:
                        - $ref: "#/components/schemas/RemarkEnum"
                        - $ref: "#/components/schemas/BlankEnum"
                        - $ref: "#/components/schemas/NullEnum"
        PatchedFeedback:
            type: object
            description: |-
                Mixin that provides retrieval of appropriate fields for the Submission
                instance, used with forms that are submitted by tabroom officials. It is up
                to subclasses to use get_submitter_fields() appropriately.
            properties:
                id:
                    type: integer
                    readOnly: true
                url:
                    type: string
                    format: uri
                    readOnly: true
                adjudicator:
                    type: string
                    format: uri
                source:
                    type: string
                    format: uri
                participant_submitter:
                    type: string
                    format: uri
                    nullable: true
                debate:
                    type: string
                    format: uri
                answers:
                    type: array
                    items:
                        $ref: "#/components/schemas/FeedbackAnswer"
                timestamp:
                    type: string
                    format: date-time
                    readOnly: true
                version:
                    type: integer
                    readOnly: true
                submitter_type:
                    allOf:
                        - $ref: "#/components/schemas/SubmitterTypeEnum"
                    readOnly: true
                confirmed:
                    type: boolean
                private_url:
                    type: boolean
                    readOnly: true
                    title: From private URL
                confirm_timestamp:
                    type: string
                    format: date-time
                    readOnly: true
                    nullable: true
                ip_address:
                    type: string
                    readOnly: true
                    nullable: true
                score:
                    type: number
                    format: double
                ignored:
                    type: boolean
                    description: Whether the feedback should affect the adjudicator's score
                submitter:
                    type: integer
                    readOnly: true
                    nullable: true
                confirmer:
                    type: integer
                    readOnly: true
                    nullable: true
        PatchedFeedbackQuestion:
            type: object
            properties:
                id:
                    type: integer
                    readOnly: true
                url:
                    type: string
                    format: uri
                    readOnly: true
                seq:
                    type: integer
                    maximum: 2147483647
                    minimum: -2147483648
                    title: Sequence number
                    description: The order in which questions are displayed
                text:
                    type: string
                    description:
                        The question displayed to participants, e.g., "Did you agree
                        with the decision?"
                    maxLength: 255
                name:
                    type: string
                    description: A short name for the question, e.g., "Agree with decision"
                    maxLength: 30
                reference:
                    type: string
                    description: Code-compatible reference, e.g., "agree_with_decision"
                    maxLength: 50
                    pattern: ^[-a-zA-Z0-9_]+$
                from_adj:
                    type: boolean
                    title: From adjudicator
                    description: Adjudicators should be asked this question (about other adjudicators)
                from_team:
                    type: boolean
                    description: Teams should be asked this question
                answer_type:
                    $ref: "#/components/schemas/AnswerTypeEnum"
                required:
                    type: boolean
                    description: Whether participants are required to fill out this field
                min_value:
                    type: number
                    format: double
                    nullable: true
                    title: Minimum value
                    description:
                        Minimum allowed value for numeric fields (ignored for text
                        or boolean fields)
                max_value:
                    type: number
                    format: double
                    nullable: true
                    title: Maximum value
                    description:
                        Maximum allowed value for numeric fields (ignored for text
                        or boolean fields)
                choices:
                    type: array
                    items:
                        type: string
                    description:
                        Permissible choices for select one/multiple fields (ignored
                        for other fields)
        PatchedGroup:
            type: object
            properties:
                id:
                    type: integer
                    readOnly: true
                url:
                    type: string
                    format: uri
                    readOnly: true
                name:
                    type: string
                    maxLength: 100
                permissions:
                    type: array
                    items:
                        $ref: "#/components/schemas/PermissionsEnum"
                users:
                    type: array
                    items:
                        type: integer
                    readOnly: true
        PatchedInstitution:
            type: object
            properties:
                id:
                    type: integer
                    readOnly: true
                url:
                    type: string
                    format: uri
                    readOnly: true
                region:
                    type: string
                    nullable: true
                venue_constraints:
                    type: array
                    items:
                        $ref: "#/components/schemas/VenueConstraint"
                name:
                    type: string
                    description:
                        The institution's full name, e.g., "University of Cambridge",
                        "Victoria University of Wellington"
                    maxLength: 100
                code:
                    type: string
                    description:
                        What the institution is typically called for short, e.g., "Cambridge",
                        "Vic Wellington"
                    maxLength: 20
        PatchedMotion:
            type: object
            properties:
                id:
                    type: integer
                    readOnly: true
                url:
                    type: string
                    format: uri
                    readOnly: true
                rounds:
                    type: array
                    items:
                        $ref: "#/components/schemas/Rounds"
                info_slide_plain:
                    type: string
                    readOnly: true
                text:
                    type: string
                    description: The full motion e.g., "This House would straighten all bananas"
                    maxLength: 500
                reference:
                    type: string
                    description: Shortcode for the motion, e.g., "Bananas"
                    maxLength: 100
                info_slide:
                    type: string
                    description: The information slide for this topic; if it has one
        PatchedPreference:
            type: object
            properties:
                section:
                    type: string
                    readOnly: true
                name:
                    type: string
                    readOnly: true
                identifier:
                    type: string
                    readOnly: true
                default:
                    type: string
                    readOnly: true
                value:
                    type: string
                verbose_name:
                    type: string
                    readOnly: true
                help_text:
                    type: string
                    readOnly: true
                additional_data:
                    type: string
                    readOnly: true
                field:
                    type: string
                    readOnly: true
        PatchedPreformedPanel:
            type: object
            properties:
                id:
                    type: integer
                    readOnly: true
                url:
                    type: string
                    format: uri
                    readOnly: true
                adjudicators:
                    allOf:
                        - $ref: "#/components/schemas/DebateAdjudicator"
                    nullable: true
                importance:
                    $ref: "#/components/schemas/PreformedPanelImportanceEnum"
                bracket_min:
                    type: number
                    format: double
                    title: Minimum bracket
                    description: Estimate of the lowest bracket for which this panel might be
                bracket_max:
                    type: number
                    format: double
                    title: Maximum bracket
                    description:
                        Estimate of the highest bracket for which this panel might
                        be
                room_rank:
                    type: integer
                    maximum: 2147483647
                    minimum: -2147483648
                    description: Sequential number of panel, not used in any algorithms
                liveness:
                    type: integer
                    maximum: 2147483647
                    minimum: -2147483648
                    description: Number of categories this room is expected to be live for
        PatchedRound:
            type: object
            properties:
                id:
                    type: integer
                    readOnly: true
                url:
                    type: string
                    format: uri
                    readOnly: true
                break_category:
                    type: string
                    format: uri
                    nullable: true
                motions:
                    type: array
                    items:
                        $ref: "#/components/schemas/RoundMotion"
                starts_at:
                    type: string
                    format: date-time
                    nullable: true
                _links:
                    allOf:
                        - $ref: "#/components/schemas/RoundLinks"
                    readOnly: true
                    title: " links"
                seq:
                    type: integer
                    maximum: 2147483647
                    minimum: 0
                    title: Sequence number
                    description:
                        A number that determines the order of the round, should count
                        consecutively from 1 for the first round
                completed:
                    type: boolean
                    description:
                        True if the round is over, which normally means all results
                        have been entered and confirmed
                name:
                    type: string
                    description: e.g. "Round 1"
                    maxLength: 40
                abbreviation:
                    type: string
                    description: e.g. "R1"
                    maxLength: 10
                stage:
                    allOf:
                        - $ref: "#/components/schemas/StageEnum"
                    description: |-
                        Preliminary = inrounds, elimination = outrounds

                        * `P` - Preliminary
                        * `E` - Elimination
                draw_type:
                    allOf:
                        - $ref: "#/components/schemas/DrawTypeEnum"
                    description: |-
                        Which draw method to use

                        * `R` - Random
                        * `M` - Manual
                        * `D` - Round-robin
                        * `P` - Power-paired
                        * `E` - Elimination
                        * `S` - Seeded
                draw_status:
                    allOf:
                        - $ref: "#/components/schemas/DrawStatusEnum"
                    description: |-
                        The status of this round's draw

                        * `N` - None
                        * `D` - Draft
                        * `C` - Confirmed
                        * `R` - Released
                feedback_weight:
                    type: number
                    format: double
                    description:
                        The extent to which each adjudicator's overall score depends
                        on feedback vs their base score. At 0, it is 100% drawn from their base
                        score, at 1 it is 100% drawn from feedback.
                silent:
                    type: boolean
                    description:
                        If marked silent, information about this round (such as its
                        results) will not be shown publicly.
                motions_released:
                    type: boolean
                    description:
                        Whether motions will appear on the public website, assuming
                        that feature is turned on
                weight:
                    type: integer
                    maximum: 2147483647
                    minimum: -2147483648
                    description:
                        A factor for the points received in the round. For example,
                        if 2, all points are doubled.
        PatchedRoundPairing:
            type: object
            properties:
                id:
                    type: integer
                    readOnly: true
                url:
                    type: string
                    format: uri
                    readOnly: true
                venue:
                    type: string
                    format: uri
                    nullable: true
                teams:
                    type: array
                    items:
                        $ref: "#/components/schemas/DebateTeam"
                adjudicators:
                    allOf:
                        - $ref: "#/components/schemas/DebateAdjudicator"
                    nullable: true
                _links:
                    allOf:
                        - $ref: "#/components/schemas/PairingLinks"
                    readOnly: true
                    title: " links"
                bracket:
                    type: number
                    format: double
                room_rank:
                    type: integer
                    maximum: 2147483647
                    minimum: -2147483648
                importance:
                    allOf:
                        - $ref: "#/components/schemas/RoundPairingImportanceEnum"
                    minimum: -2147483648
                    maximum: 2147483647
                result_status:
                    $ref: "#/components/schemas/ResultStatusEnum"
                sides_confirmed:
                    type: boolean
                    description:
                        If unchecked, the sides assigned to teams in this debate are
                        just placeholders.
        PatchedScoreCriterion:
            type: object
            properties:
                id:
                    type: integer
                    readOnly: true
                url:
                    type: string
                    format: uri
                    readOnly: true
                name:
                    type: string
                    maxLength: 20
                seq:
                    type: integer
                    maximum: 2147483647
                    minimum: -2147483648
                    title: Sequence
                weight:
                    type: number
                    format: double
                min_score:
                    type: number
                    format: double
                    title: Minimum score
                max_score:
                    type: number
                    format: double
                    title: Maximum score
                step:
                    type: number
                    format: double
                required:
                    type: boolean
        PatchedSpeaker:
            type: object
            properties:
                id:
                    type: integer
                    readOnly: true
                url:
                    type: string
                    format: uri
                    readOnly: true
                name:
                    type: string
                team:
                    type: string
                    format: uri
                categories:
                    type: array
                    items:
                        type: string
                        format: uri
                _links:
                    allOf:
                        - $ref: "#/components/schemas/SpeakerLinks"
                    readOnly: true
                    title: " links"
                barcode:
                    type: string
                    readOnly: true
                email:
                    type: string
                    format: email
                    nullable: true
                    title: Email address
                    maxLength: 254
                phone:
                    type: string
                    maxLength: 40
                anonymous:
                    type: boolean
                    description:
                        Anonymous persons will have their name and team redacted on
                        public tab releases
                code_name:
                    type: string
                    description: Name used to obscure real name on public-facing pages
                    maxLength: 25
                url_key:
                    type: string
                    nullable: true
                    maxLength: 24
                    pattern: ^[-a-zA-Z0-9_]+$
                gender:
                    description: |-
                        Gender is displayed in the adjudicator allocation interface, and nowhere else

                        * `M` - male
                        * `F` - female
                        * `O` - other
                    oneOf:
                        - $ref: "#/components/schemas/GenderEnum"
                        - $ref: "#/components/schemas/BlankEnum"
                pronoun:
                    type: string
                    description:
                        If printing ballots using Tabbycat, there is the option to
                        pre-print pronouns
                    maxLength: 10
        PatchedSpeakerCategory:
            type: object
            properties:
                id:
                    type: integer
                    readOnly: true
                url:
                    type: string
                    format: uri
                    readOnly: true
                _links:
                    allOf:
                        - $ref: "#/components/schemas/SpeakerCategoryLinks"
                    readOnly: true
                    title: " links"
                name:
                    type: string
                    description: Name to be displayed, e.g., "Novice", "ESL"
                    maxLength: 50
                slug:
                    type: string
                    description: Slug for URLs, e.g., "novice", "esl"
                    maxLength: 50
                    pattern: ^[-a-zA-Z0-9_]+$
                seq:
                    type: integer
                    maximum: 2147483647
                    minimum: -2147483648
                    title: Sequence number
                    description: The order in which the categories are displayed
                limit:
                    type: integer
                    maximum: 2147483647
                    minimum: -2147483648
                    description:
                        At most this many speakers will be shown on the public tab
                        for this category, or use 0 for no limit
                public:
                    type: boolean
                    description:
                        If checked, this category will be included in the speaker category
                        tabs shown to the public
        PatchedSpeakerEligibility:
            type: object
            properties:
                slug:
                    type: string
                    readOnly: true
                    description: Slug for URLs, e.g., "novice", "esl"
                    pattern: ^[-a-zA-Z0-9_]+$
                speaker_set:
                    type: array
                    items:
                        type: string
                        format: uri
        PatchedTeam:
            type: object
            properties:
                id:
                    type: integer
                    readOnly: true
                url:
                    type: string
                    format: uri
                    readOnly: true
                institution:
                    type: string
                    format: uri
                    nullable: true
                break_categories:
                    type: array
                    items:
                        type: string
                        format: uri
                institution_conflicts:
                    type: array
                    items:
                        type: string
                        format: uri
                venue_constraints:
                    type: array
                    items:
                        $ref: "#/components/schemas/VenueConstraint"
                reference:
                    type: string
                    title: Full name/suffix
                    description:
                        Do not include institution name (see "uses institutional prefix"
                        below)
                    maxLength: 150
                short_reference:
                    type: string
                    title: Short name/suffix
                    description:
                        The decoded name shown in the draw, not including institution
                        name (see "uses institutional prefix" below)
                    maxLength: 35
                code_name:
                    type: string
                    description:
                        Name used to obscure institutional identity on public-facing
                        pages
                    maxLength: 150
                short_name:
                    type: string
                    readOnly: true
                    description:
                        The decoded name shown in the draw, including institution name.
                        (This is autogenerated.)
                long_name:
                    type: string
                    readOnly: true
                    description:
                        The full name of the team, including institution name. (This
                        is autogenerated.)
                use_institution_prefix:
                    type: boolean
                    title: Uses institutional prefix
                    description:
                        If ticked, a team called "1" from Victoria will be shown as
                        "Victoria 1"
                seed:
                    type: integer
                    maximum: 2147483647
                    minimum: 0
                    nullable: true
                    description: Used as initial ranking to power-pair the first round
                emoji:
                    nullable: true
                    oneOf:
                        - $ref: "#/components/schemas/EmojiEnum"
                        - $ref: "#/components/schemas/BlankEnum"
                        - $ref: "#/components/schemas/NullEnum"
                speakers:
                    type: array
                    items:
                        $ref: "#/components/schemas/TeamSpeaker"
        PatchedTournament:
            type: object
            properties:
                id:
                    type: integer
                    readOnly: true
                url:
                    type: string
                    format: uri
                    readOnly: true
                current_rounds:
                    type: array
                    items:
                        type: string
                        format: uri
                    readOnly: true
                _links:
                    allOf:
                        - $ref: "#/components/schemas/TournamentLinks"
                    readOnly: true
                    title: " links"
                name:
                    type: string
                    description:
                        The full name, e.g. "Australasian Intervarsity Debating Championships
                        2016"
                    maxLength: 100
                short_name:
                    type: string
                    description: The name used in the menu, e.g. "Australs 2016"
                    maxLength: 25
                seq:
                    type: integer
                    maximum: 2147483647
                    minimum: -2147483648
                    nullable: true
                    title: Sequence number
                    description:
                        A number that determines the relative order in which tournaments
                        are displayed on the homepage.
                slug:
                    type: string
                    description: The sub-URL of the tournament, cannot have spaces, e.g. "australs2016"
                    maxLength: 50
                    pattern: ^[-a-zA-Z0-9_]+$
                active:
                    type: boolean
        PatchedUpdateBallot:
            type: object
            description: Unused, just for OpenAPI with BallotSerializer.update()
            properties:
                confirmed:
                    type: boolean
                discarded:
                    type: boolean
        PatchedUser:
            type: object
            properties:
                id:
                    type: integer
                    readOnly: true
                url:
                    type: string
                    format: uri
                    readOnly: true
                username:
                    type: string
                    description:
                        Required. 150 characters or fewer. Letters, digits and @/./+/-/_
                        only.
                    pattern: ^[\w.@+-]+$
                    maxLength: 150
                password:
                    type: string
                    writeOnly: true
                    maxLength: 128
                is_superuser:
                    type: boolean
                    title: Superuser status
                    description:
                        Designates that this user has all permissions without explicitly
                        assigning them.
                is_staff:
                    type: boolean
                    title: Staff status
                    description: Designates whether the user can log into this admin site.
                email:
                    type: string
                    format: email
                    title: Email address
                    maxLength: 254
                is_active:
                    type: boolean
                    title: Active
                    description:
                        Designates whether this user should be treated as active. Unselect
                        this instead of deleting accounts.
                date_joined:
                    type: string
                    format: date-time
                    readOnly: true
                last_login:
                    type: string
                    format: date-time
                    readOnly: true
                    nullable: true
                tournaments:
                    type: array
                    items:
                        $ref: "#/components/schemas/TournamentPermissions"
        PatchedVenue:
            type: object
            properties:
                id:
                    type: integer
                    readOnly: true
                url:
                    type: string
                    format: uri
                    readOnly: true
                categories:
                    type: array
                    items:
                        type: string
                        format: uri
                display_name:
                    type: string
                    readOnly: true
                external_url:
                    type: string
                    format: uri
                _links:
                    allOf:
                        - $ref: "#/components/schemas/VenueLinks"
                    readOnly: true
                    title: " links"
                name:
                    type: string
                    maxLength: 40
                priority:
                    type: integer
                    maximum: 2147483647
                    minimum: -2147483648
                    description:
                        Rooms with a higher priority number will be preferred when
                        allocating rooms to debates
        PatchedVenueCategory:
            type: object
            properties:
                id:
                    type: integer
                    readOnly: true
                url:
                    type: string
                    format: uri
                    readOnly: true
                venues:
                    type: array
                    items:
                        type: string
                        format: uri
                name:
                    type: string
                    description:
                        Name of category, e.g., "Purple", "Step-free access", "Close
                        to tab room". This name is shown when the category is prefixed or suffixed
                        to a room name in the draw, e.g., "Purple – G05".
                    maxLength: 80
                description:
                    type: string
                    description:
                        Description, as the predicate of a sentence, e.g. "has step-free
                        access", "is close to the briefing hall". This description follows "This
                        room" when shown in tooltips, e.g., "This room is close to the briefing
                        hall.".
                    maxLength: 200
                display_in_venue_name:
                    allOf:
                        - $ref: "#/components/schemas/DisplayInVenueNameEnum"
                    title: Display in room name
                    description: |-
                        Prefix: "Purple – G05", Suffix: "G05 – Purple"

                        * `-` - Don't display in room name
                        * `P` - Display as prefix
                        * `S` - Display as suffix
                display_in_public_tooltip:
                    type: boolean
                    description:
                        Displays the description in the tooltip for the room on public
                        pages. The description, if not blank, will always show on admin pages.
        PerTournamentInstitution:
            type: object
            properties:
                id:
                    type: integer
                    readOnly: true
                url:
                    type: string
                    format: uri
                    readOnly: true
                region:
                    type: string
                    nullable: true
                venue_constraints:
                    type: array
                    items:
                        $ref: "#/components/schemas/VenueConstraint"
                teams:
                    type: array
                    items:
                        type: string
                        format: uri
                adjudicators:
                    type: array
                    items:
                        type: string
                        format: uri
                name:
                    type: string
                    description:
                        The institution's full name, e.g., "University of Cambridge",
                        "Victoria University of Wellington"
                    maxLength: 100
                code:
                    type: string
                    description:
                        What the institution is typically called for short, e.g., "Cambridge",
                        "Vic Wellington"
                    maxLength: 20
            required:
                - code
                - id
                - name
                - url
        PermissionsEnum:
            enum:
                - view.adjudicatorteamconflict
                - edit.adjudicatorteamconflict
                - view.adjudicatoradjudicatorconflict
                - edit.adjudicatoradjudicatorconflict
                - view.adjudicatorinstitutionconflict
                - edit.adjudicatorinstitutionconflict
                - view.teaminstitutionconflict
                - edit.teaminstitutionconflict
                - view.actionlogentry
                - view.team
                - add.team
                - view.teamname
                - view.anonymous
                - view.adj
                - add.adj
                - view.room
                - add.room
                - view.inst
                - add.inst
                - view.particpants
                - view.participants.gender
                - view.participants.contact
                - view.participants.decoded
                - view.participants.inst
                - view.roundavailability.team
                - view.roundavailability.adjudicator
                - view.roundavailability.venue
                - edit.roundavailability.team
                - edit.roundavailability.adjudicator
                - edit.roundavailability.venue
                - view.roundavailability
                - edit.roundavailability
                - view.roomconstraints
                - view.roomcategories
                - edit.roomconstraints
                - edit.roomcategories
                - view.debate
                - view.debate.admin
                - generate.debate
                - edit.debateteam
                - view.debateadjudicator
                - edit.debateadjudicator
                - view.roomallocations
                - edit.roomallocations
                - edit.allocatesides
                - view.ballotsubmission.new
                - edit.ballotsubmission.old
                - view.ballotsubmission
                - edit.ballotsubmission
                - add.ballotsubmission
                - mark.ballotsubmission
                - mark.ballotsubmission.others
                - view.ballotsubmission.graph
                - view.results
                - view.roundmotion
                - edit.roundmotion
                - release.draw
                - release.motion
                - unrelease.draw
                - unrelease.motion
                - edit.starttime
                - view.draw
                - view.briefingdraw
                - display.motion
                - view.tournamentpreferencemodel
                - edit.tournamentpreferencemodel
                - view.preformedpanels
                - edit.preformedpanels
                - view.standingsoverview
                - view.teamstandings
                - view.speakersstandings
                - view.repliesstandings
                - view.motionstab
                - view.diversitytab
                - view.feedbackoverview
                - edit.judgescoresbulk
                - edit.judgescoresind
                - view.feedback
                - edit.feedbackignore
                - edit.feedbackconfirm
                - view.feedbackunsubmitted
                - add.feedback
                - view.adj.break
                - edit.adj.break
                - edit.feedbackquestion
                - edit.breakeligibility
                - view.breakeligibility
                - edit.breakcategories
                - view.breakcategories
                - view.speakercategories
                - edit.speakercategories
                - view.speakereligibility
                - edit.speakereligibility
                - view.break.overview
                - view.break
                - generate.break
                - view.privateurls
                - view.privateurls.emaillist
                - generate.privateurls
                - send.privateurls
                - view.checkin
                - edit.participantcheckin
                - edit.roomcheckin
                - edit.round
                - delete.round
                - add.round
                - view.emails
                - send.emails
                - export.xml
                - view.settings
                - edit.settings
            type: string
            description: |-
                * `view.adjudicatorteamconflict` - view adjudicator-team conflicts
                * `edit.adjudicatorteamconflict` - edit adjudicator-team conflicts
                * `view.adjudicatoradjudicatorconflict` - view adjudicator-adjudicator conflicts
                * `edit.adjudicatoradjudicatorconflict` - edit adjudicator-adjudicator conflicts
                * `view.adjudicatorinstitutionconflict` - view adjudicator-institution conflicts
                * `edit.adjudicatorinstitutionconflict` - edit adjudicator-institution conflicts
                * `view.teaminstitutionconflict` - view team-institution conflicts
                * `edit.teaminstitutionconflict` - edit team-institution conflicts
                * `view.actionlogentry` - view action log entries
                * `view.team` - view teams
                * `add.team` - add teams
                * `view.teamname` - view decoded team names
                * `view.anonymous` - View names of anonymized participants
                * `view.adj` - view adjudicators
                * `add.adj` - add adjudicators
                * `view.room` - view rooms
                * `add.room` - add rooms
                * `view.inst` - view institutions
                * `add.inst` - add institutions
                * `view.particpants` - view participants
                * `view.participants.gender` - view participants' gender information
                * `view.participants.contact` - view participants' contact information
                * `view.participants.decoded` - view participants' real names
                * `view.participants.inst` - view participants' institution
                * `view.roundavailability.team` - view round availabilities for teams
                * `view.roundavailability.adjudicator` - view round availabilities for adjudicators
                * `view.roundavailability.venue` - view round availabilities for rooms
                * `edit.roundavailability.team` - edit round availabilities for teams
                * `edit.roundavailability.adjudicator` - edit round availabilities for adjudicators
                * `edit.roundavailability.venue` - edit round availabilities for rooms
                * `view.roundavailability` - view round availabilities
                * `edit.roundavailability` - edit round availabilities
                * `view.roomconstraints` - view room constraints
                * `view.roomcategories` - view room categories
                * `edit.roomconstraints` - edit room constraints
                * `edit.roomcategories` - edit room categories
                * `view.debate` - view debates (draw)
                * `view.debate.admin` - view debates (detailed draw)
                * `generate.debate` - generate debates (draw)
                * `edit.debateteam` - edit debate teams (pairings)
                * `view.debateadjudicator` - view debate adjudicators (allocations)
                * `edit.debateadjudicator` - edit debate adjudicators (allocations)
                * `view.roomallocations` - view room allocations
                * `edit.roomallocations` - edit room allocations
                * `edit.allocatesides` - edit and confirm outround team positions
                * `view.ballotsubmission.new` - view confirmed ballots
                * `edit.ballotsubmission.old` - edit non-confirmed ballots
                * `view.ballotsubmission` - view any ballot
                * `edit.ballotsubmission` - edit any ballot
                * `add.ballotsubmission` - create ballots
                * `mark.ballotsubmission` - confirm/discard any ballot
                * `mark.ballotsubmission.others` - confirm/discard others' ballots
                * `view.ballotsubmission.graph` - view ballot graph
                * `view.results` - view results entry page
                * `view.roundmotion` - view motion per round
                * `edit.roundmotion` - edit motion per round
                * `release.draw` - release draw to public
                * `release.motion` - release motion to public
                * `unrelease.draw` - unrelease draw to public
                * `unrelease.motion` - unrelease motion to public
                * `edit.starttime` - add debate start time
                * `view.draw` - view draws
                * `view.briefingdraw` - view draws (for the briefing room)
                * `display.motion` - display motion (for the briefing room)
                * `view.tournamentpreferencemodel` - view tournament configuration
                * `edit.tournamentpreferencemodel` - edit tournament configuration
                * `view.preformedpanels` - view existing preformed panels
                * `edit.preformedpanels` - edit preformed panels
                * `view.standingsoverview` - view the overviews of standings
                * `view.teamstandings` - view the most recent team standings
                * `view.speakersstandings` - view the most recent speaker standings
                * `view.repliesstandings` - view the most recent replies standings
                * `view.motionstab` - view the most recent motions tab
                * `view.diversitytab` - view the diversity tab
                * `view.feedbackoverview` - view overview of judge feedback
                * `edit.judgescoresbulk` - bulk update judge scores
                * `edit.judgescoresind` - edit base scores of judges
                * `view.feedback` - view feedback
                * `edit.feedbackignore` - toggle ignore feedback
                * `edit.feedbackconfirm` - toggle confirm feedback
                * `view.feedbackunsubmitted` - view feedback unsubmitted tab
                * `add.feedback` - add feedback
                * `view.adj.break` - view adjudicator break
                * `edit.adj.break` - edit adjudicator break
                * `edit.feedbackquestion` - edit feedback questions
                * `edit.breakeligibility` - edit break eligibility
                * `view.breakeligibility` - view break eligibility
                * `edit.breakcategories` - edit break categories
                * `view.breakcategories` - view break categories
                * `view.speakercategories` - view speaker categories
                * `edit.speakercategories` - edit speaker categories
                * `view.speakereligibility` - view speaker eligibility
                * `edit.speakereligibility` - edit speaker eligibility
                * `view.break.overview` - view break overview
                * `view.break` - view breaks
                * `generate.break` - generate all breaks
                * `view.privateurls` - view private urls
                * `view.privateurls.emaillist` - view private urls email list
                * `generate.privateurls` - generate private URLs
                * `send.privateurls` - send private URLs
                * `view.checkin` - view checkins
                * `edit.participantcheckin` - edit participant check-in
                * `edit.roomcheckin` - edit room check-in
                * `edit.round` - edit round attributes
                * `delete.round` - delete rounds
                * `add.round` - create rounds
                * `view.emails` - view email statuses
                * `send.emails` - send participants email messages
                * `export.xml` - export DebateXML
                * `view.settings` - view settings
                * `edit.settings` - edit settings
        Preference:
            type: object
            properties:
                section:
                    type: string
                    readOnly: true
                name:
                    type: string
                    readOnly: true
                identifier:
                    type: string
                    readOnly: true
                default:
                    type: string
                    readOnly: true
                value:
                    type: string
                verbose_name:
                    type: string
                    readOnly: true
                help_text:
                    type: string
                    readOnly: true
                additional_data:
                    type: string
                    readOnly: true
                field:
                    type: string
                    readOnly: true
            required:
                - additional_data
                - default
                - field
                - help_text
                - identifier
                - name
                - section
                - value
                - verbose_name
        PreformedPanel:
            type: object
            properties:
                id:
                    type: integer
                    readOnly: true
                url:
                    type: string
                    format: uri
                    readOnly: true
                adjudicators:
                    allOf:
                        - $ref: "#/components/schemas/DebateAdjudicator"
                    nullable: true
                importance:
                    $ref: "#/components/schemas/PreformedPanelImportanceEnum"
                bracket_min:
                    type: number
                    format: double
                    title: Minimum bracket
                    description: Estimate of the lowest bracket for which this panel might be
                bracket_max:
                    type: number
                    format: double
                    title: Maximum bracket
                    description:
                        Estimate of the highest bracket for which this panel might
                        be
                room_rank:
                    type: integer
                    maximum: 2147483647
                    minimum: -2147483648
                    description: Sequential number of panel, not used in any algorithms
                liveness:
                    type: integer
                    maximum: 2147483647
                    minimum: -2147483648
                    description: Number of categories this room is expected to be live for
            required:
                - id
                - url
        PreformedPanelImportanceEnum:
            enum:
                - -2.0
                - -1.0
                - 0.0
                - 1.0
                - 2.0
            type: number
            description: |-
                * `-2.0` - -2
                * `-1.0` - -1
                * `0.0` - 0
                * `1.0` - 1
                * `2.0` - 2
        RemarkEnum:
            enum:
                - C
                - I
                - D
                - d
                - t
                - w
            type: string
            description: |-
                * `C` - Capped
                * `I` - Ineligible
                * `D` - Different break
                * `d` - Disqualified
                * `t` - Lost coin toss
                * `w` - Withdrawn
        Result:
            type: object
            properties:
                sheets:
                    type: array
                    items:
                        $ref: "#/components/schemas/Sheet"
            required:
                - sheets
        ResultStatusEnum:
            enum:
                - N
                - P
                - D
                - C
            type: string
            description: |-
                * `N` - none
                * `P` - postponed
                * `D` - draft
                * `C` - confirmed
        Root:
            type: object
            properties:
                _links:
                    allOf:
                        - $ref: "#/components/schemas/RootLinks"
                    readOnly: true
                    title: " links"
                timezone:
                    type: string
                    readOnly: true
                version:
                    type: string
            required:
                - _links
                - timezone
                - version
        RootLinks:
            type: object
            properties:
                v1:
                    type: string
                    format: uri
                    readOnly: true
            required:
                - v1
        Round:
            type: object
            properties:
                id:
                    type: integer
                    readOnly: true
                url:
                    type: string
                    format: uri
                    readOnly: true
                break_category:
                    type: string
                    format: uri
                    nullable: true
                motions:
                    type: array
                    items:
                        $ref: "#/components/schemas/RoundMotion"
                starts_at:
                    type: string
                    format: date-time
                    nullable: true
                _links:
                    allOf:
                        - $ref: "#/components/schemas/RoundLinks"
                    readOnly: true
                    title: " links"
                seq:
                    type: integer
                    maximum: 2147483647
                    minimum: 0
                    title: Sequence number
                    description:
                        A number that determines the order of the round, should count
                        consecutively from 1 for the first round
                completed:
                    type: boolean
                    description:
                        True if the round is over, which normally means all results
                        have been entered and confirmed
                name:
                    type: string
                    description: e.g. "Round 1"
                    maxLength: 40
                abbreviation:
                    type: string
                    description: e.g. "R1"
                    maxLength: 10
                stage:
                    allOf:
                        - $ref: "#/components/schemas/StageEnum"
                    description: |-
                        Preliminary = inrounds, elimination = outrounds

                        * `P` - Preliminary
                        * `E` - Elimination
                draw_type:
                    allOf:
                        - $ref: "#/components/schemas/DrawTypeEnum"
                    description: |-
                        Which draw method to use

                        * `R` - Random
                        * `M` - Manual
                        * `D` - Round-robin
                        * `P` - Power-paired
                        * `E` - Elimination
                        * `S` - Seeded
                draw_status:
                    allOf:
                        - $ref: "#/components/schemas/DrawStatusEnum"
                    description: |-
                        The status of this round's draw

                        * `N` - None
                        * `D` - Draft
                        * `C` - Confirmed
                        * `R` - Released
                feedback_weight:
                    type: number
                    format: double
                    description:
                        The extent to which each adjudicator's overall score depends
                        on feedback vs their base score. At 0, it is 100% drawn from their base
                        score, at 1 it is 100% drawn from feedback.
                silent:
                    type: boolean
                    description:
                        If marked silent, information about this round (such as its
                        results) will not be shown publicly.
                motions_released:
                    type: boolean
                    description:
                        Whether motions will appear on the public website, assuming
                        that feature is turned on
                weight:
                    type: integer
                    maximum: 2147483647
                    minimum: -2147483648
                    description:
                        A factor for the points received in the round. For example,
                        if 2, all points are doubled.
            required:
                - _links
                - abbreviation
                - draw_type
                - id
                - name
                - seq
                - url
        RoundLinks:
            type: object
            properties:
                pairing:
                    type: string
                    format: uri
                    readOnly: true
                availabilities:
                    type: string
                    format: uri
                    readOnly: true
                preformed_panels:
                    type: string
                    format: uri
                    readOnly: true
            required:
                - availabilities
                - pairing
                - preformed_panels
        RoundMotion:
            type: object
            properties:
                id:
                    type: integer
                    readOnly: true
                url:
                    type: string
                    format: uri
                text:
                    type: string
                    maxLength: 500
                reference:
                    type: string
                    maxLength: 100
                info_slide:
                    type: string
                info_slide_plain:
                    type: string
                    readOnly: true
                seq:
                    type: integer
                    readOnly: true
            required:
                - id
                - info_slide_plain
                - seq
        RoundPairing:
            type: object
            properties:
                id:
                    type: integer
                    readOnly: true
                url:
                    type: string
                    format: uri
                    readOnly: true
                venue:
                    type: string
                    format: uri
                    nullable: true
                teams:
                    type: array
                    items:
                        $ref: "#/components/schemas/DebateTeam"
                adjudicators:
                    allOf:
                        - $ref: "#/components/schemas/DebateAdjudicator"
                    nullable: true
                _links:
                    allOf:
                        - $ref: "#/components/schemas/PairingLinks"
                    readOnly: true
                    title: " links"
                bracket:
                    type: number
                    format: double
                room_rank:
                    type: integer
                    maximum: 2147483647
                    minimum: -2147483648
                importance:
                    allOf:
                        - $ref: "#/components/schemas/RoundPairingImportanceEnum"
                    minimum: -2147483648
                    maximum: 2147483647
                result_status:
                    $ref: "#/components/schemas/ResultStatusEnum"
                sides_confirmed:
                    type: boolean
                    description:
                        If unchecked, the sides assigned to teams in this debate are
                        just placeholders.
            required:
                - _links
                - id
                - teams
                - url
        RoundPairingImportanceEnum:
            enum:
                - -2
                - -1
                - 0
                - 1
                - 2
            type: integer
            description: |-
                * `-2` - -2
                * `-1` - -1
                * `0` - 0
                * `1` - 1
                * `2` - 2
        RoundScores:
            type: object
            properties:
                round:
                    type: string
                    format: uri
                speeches:
                    type: array
                    items:
                        $ref: "#/components/schemas/RoundSpeech"
            required:
                - round
                - speeches
        RoundSpeech:
            type: object
            properties:
                score:
                    type: number
                    format: double
                position:
                    type: integer
                    maximum: 2147483647
                    minimum: -2147483648
                ghost:
                    type: boolean
                    description:
                        If checked, this score does not count towards the speaker tab.
                        This is typically checked for speeches where someone spoke twice to make
                        up for an absent teammate (sometimes known as "iron-person" or "iron-man"
                        speeches).
            required:
                - position
                - score
        Rounds:
            type: object
            properties:
                round:
                    type: string
                    format: uri
                seq:
                    type: integer
                    maximum: 2147483647
                    minimum: -2147483648
                    default: 1
                    title: Sequence number
                    description: The order in which motions are displayed
            required:
                - round
        RuleEnum:
            enum:
                - standard
                - aida-1996
                - aida-2016-easters
                - aida-2016-australs
                - aida-2019-australs-open
            type: string
            description: |-
                * `standard` - Standard
                * `aida-1996` - AIDA 1996
                * `aida-2016-easters` - AIDA 2016 (Easters)
                * `aida-2016-australs` - AIDA 2016 (Australs)
                * `aida-2019-australs-open` - AIDA 2019 (Australs, Dynamic Cap)
        Score:
            type: object
            properties:
                round:
                    type: string
                    format: uri
                points:
                    type: integer
                score:
                    type: number
                    format: double
                has_ghost:
                    type: boolean
            required:
                - has_ghost
                - points
                - round
                - score
        ScoreCriterion:
            type: object
            properties:
                id:
                    type: integer
                    readOnly: true
                url:
                    type: string
                    format: uri
                    readOnly: true
                name:
                    type: string
                    maxLength: 20
                seq:
                    type: integer
                    maximum: 2147483647
                    minimum: -2147483648
                    title: Sequence
                weight:
                    type: number
                    format: double
                min_score:
                    type: number
                    format: double
                    title: Minimum score
                max_score:
                    type: number
                    format: double
                    title: Maximum score
                step:
                    type: number
                    format: double
                required:
                    type: boolean
            required:
                - id
                - max_score
                - min_score
                - name
                - seq
                - step
                - url
                - weight
        Sheet:
            type: object
            properties:
                teams:
                    type: array
                    items:
                        $ref: "#/components/schemas/TeamResult"
                adjudicator:
                    type: string
                    format: uri
                    nullable: true
            required:
                - teams
        Speaker:
            type: object
            properties:
                id:
                    type: integer
                    readOnly: true
                url:
                    type: string
                    format: uri
                    readOnly: true
                name:
                    type: string
                team:
                    type: string
                    format: uri
                categories:
                    type: array
                    items:
                        type: string
                        format: uri
                _links:
                    allOf:
                        - $ref: "#/components/schemas/SpeakerLinks"
                    readOnly: true
                    title: " links"
                barcode:
                    type: string
                    readOnly: true
                email:
                    type: string
                    format: email
                    nullable: true
                    title: Email address
                    maxLength: 254
                phone:
                    type: string
                    maxLength: 40
                anonymous:
                    type: boolean
                    description:
                        Anonymous persons will have their name and team redacted on
                        public tab releases
                code_name:
                    type: string
                    description: Name used to obscure real name on public-facing pages
                    maxLength: 25
                url_key:
                    type: string
                    nullable: true
                    maxLength: 24
                    pattern: ^[-a-zA-Z0-9_]+$
                gender:
                    description: |-
                        Gender is displayed in the adjudicator allocation interface, and nowhere else

                        * `M` - male
                        * `F` - female
                        * `O` - other
                    oneOf:
                        - $ref: "#/components/schemas/GenderEnum"
                        - $ref: "#/components/schemas/BlankEnum"
                pronoun:
                    type: string
                    description:
                        If printing ballots using Tabbycat, there is the option to
                        pre-print pronouns
                    maxLength: 10
            required:
                - _links
                - barcode
                - categories
                - id
                - name
                - team
                - url
        SpeakerCategory:
            type: object
            properties:
                id:
                    type: integer
                    readOnly: true
                url:
                    type: string
                    format: uri
                    readOnly: true
                _links:
                    allOf:
                        - $ref: "#/components/schemas/SpeakerCategoryLinks"
                    readOnly: true
                    title: " links"
                name:
                    type: string
                    description: Name to be displayed, e.g., "Novice", "ESL"
                    maxLength: 50
                slug:
                    type: string
                    description: Slug for URLs, e.g., "novice", "esl"
                    maxLength: 50
                    pattern: ^[-a-zA-Z0-9_]+$
                seq:
                    type: integer
                    maximum: 2147483647
                    minimum: -2147483648
                    title: Sequence number
                    description: The order in which the categories are displayed
                limit:
                    type: integer
                    maximum: 2147483647
                    minimum: -2147483648
                    description:
                        At most this many speakers will be shown on the public tab
                        for this category, or use 0 for no limit
                public:
                    type: boolean
                    description:
                        If checked, this category will be included in the speaker category
                        tabs shown to the public
            required:
                - _links
                - id
                - name
                - seq
                - slug
                - url
        SpeakerCategoryLinks:
            type: object
            properties:
                eligibility:
                    type: string
                    format: uri
                    readOnly: true
            required:
                - eligibility
        SpeakerEligibility:
            type: object
            properties:
                slug:
                    type: string
                    readOnly: true
                    description: Slug for URLs, e.g., "novice", "esl"
                    pattern: ^[-a-zA-Z0-9_]+$
                speaker_set:
                    type: array
                    items:
                        type: string
                        format: uri
            required:
                - slug
                - speaker_set
        SpeakerLinks:
            type: object
            properties:
                checkin:
                    type: string
                    format: uri
                    readOnly: true
            required:
                - checkin
        SpeakerRoundScores:
            type: object
            properties:
                speaker:
                    type: string
                    format: uri
                    readOnly: true
                rounds:
                    type: array
                    items:
                        $ref: "#/components/schemas/RoundScores"
            required:
                - rounds
                - speaker
        SpeakerStandings:
            type: object
            properties:
                rank:
                    type: integer
                    readOnly: true
                tied:
                    type: boolean
                    readOnly: true
                metrics:
                    type: array
                    items:
                        type: object
                        properties:
                            metric:
                                type: string
                                enum:
                                    - total
                                    - average
                                    - trimmed_mean
                                    - team_points
                                    - stdev
                                    - count
                                    - replies_sum
                                    - replies_avg
                                    - replies_stddev
                                    - replies_count
                                    - srank
                            value:
                                type: number
                    readOnly: true
                speaker:
                    type: string
                    format: uri
            required:
                - metrics
                - rank
                - speaker
                - tied
        Speech:
            type: object
            properties:
                ghost:
                    type: boolean
                    description:
                        If checked, this score does not count towards the speaker tab.
                        This is typically checked for speeches where someone spoke twice to make
                        up for an absent teammate (sometimes known as "iron-person" or "iron-man"
                        speeches).
                score:
                    type: number
                    format: double
                rank:
                    type: integer
                speaker:
                    type: string
                    format: uri
                criteria:
                    type: array
                    items:
                        $ref: "#/components/schemas/Criteria"
            required:
                - score
                - speaker
        StageEnum:
            enum:
                - P
                - E
            type: string
            description: |-
                * `P` - Preliminary
                * `E` - Elimination
        SubmitterTypeEnum:
            enum:
                - T
                - P
                - A
            type: string
            description: |-
                * `T` - Tab room
                * `P` - Public
                * `A` - Automation
        Team:
            type: object
            properties:
                id:
                    type: integer
                    readOnly: true
                url:
                    type: string
                    format: uri
                    readOnly: true
                institution:
                    type: string
                    format: uri
                    nullable: true
                break_categories:
                    type: array
                    items:
                        type: string
                        format: uri
                institution_conflicts:
                    type: array
                    items:
                        type: string
                        format: uri
                venue_constraints:
                    type: array
                    items:
                        $ref: "#/components/schemas/VenueConstraint"
                reference:
                    type: string
                    title: Full name/suffix
                    description:
                        Do not include institution name (see "uses institutional prefix"
                        below)
                    maxLength: 150
                short_reference:
                    type: string
                    title: Short name/suffix
                    description:
                        The decoded name shown in the draw, not including institution
                        name (see "uses institutional prefix" below)
                    maxLength: 35
                code_name:
                    type: string
                    description:
                        Name used to obscure institutional identity on public-facing
                        pages
                    maxLength: 150
                short_name:
                    type: string
                    readOnly: true
                    description:
                        The decoded name shown in the draw, including institution name.
                        (This is autogenerated.)
                long_name:
                    type: string
                    readOnly: true
                    description:
                        The full name of the team, including institution name. (This
                        is autogenerated.)
                use_institution_prefix:
                    type: boolean
                    title: Uses institutional prefix
                    description:
                        If ticked, a team called "1" from Victoria will be shown as
                        "Victoria 1"
                seed:
                    type: integer
                    maximum: 2147483647
                    minimum: 0
                    nullable: true
                    description: Used as initial ranking to power-pair the first round
                emoji:
                    nullable: true
                    oneOf:
                        - $ref: "#/components/schemas/EmojiEnum"
                        - $ref: "#/components/schemas/BlankEnum"
                        - $ref: "#/components/schemas/NullEnum"
                speakers:
                    type: array
                    items:
                        $ref: "#/components/schemas/TeamSpeaker"
            required:
                - id
                - long_name
                - short_name
                - url
        TeamResult:
            type: object
            properties:
                side:
                    anyOf:
                        - type: number
                        - type: string
                          enum:
                              - aff
                              - neg
                              - cg
                              - co
                              - bye
                points:
                    type: integer
                win:
                    type: boolean
                score:
                    type: number
                    format: double
                    nullable: true
                team:
                    type: string
                    format: uri
                speeches:
                    type: array
                    items:
                        $ref: "#/components/schemas/Speech"
            required:
                - team
        TeamRoundScores:
            type: object
            properties:
                team:
                    type: string
                    format: uri
                    readOnly: true
                rounds:
                    type: array
                    items:
                        $ref: "#/components/schemas/Score"
            required:
                - rounds
                - team
        TeamSpeaker:
            type: object
            properties:
                id:
                    type: integer
                    readOnly: true
                url:
                    type: string
                    format: uri
                    readOnly: true
                name:
                    type: string
                categories:
                    type: array
                    items:
                        type: string
                        format: uri
                _links:
                    allOf:
                        - $ref: "#/components/schemas/SpeakerLinks"
                    readOnly: true
                    title: " links"
                barcode:
                    type: string
                    readOnly: true
                email:
                    type: string
                    format: email
                    nullable: true
                    title: Email address
                    maxLength: 254
                phone:
                    type: string
                    maxLength: 40
                anonymous:
                    type: boolean
                    description:
                        Anonymous persons will have their name and team redacted on
                        public tab releases
                code_name:
                    type: string
                    description: Name used to obscure real name on public-facing pages
                    maxLength: 25
                url_key:
                    type: string
                    nullable: true
                    maxLength: 24
                    pattern: ^[-a-zA-Z0-9_]+$
                gender:
                    description: |-
                        Gender is displayed in the adjudicator allocation interface, and nowhere else

                        * `M` - male
                        * `F` - female
                        * `O` - other
                    oneOf:
                        - $ref: "#/components/schemas/GenderEnum"
                        - $ref: "#/components/schemas/BlankEnum"
                pronoun:
                    type: string
                    description:
                        If printing ballots using Tabbycat, there is the option to
                        pre-print pronouns
                    maxLength: 10
            required:
                - _links
                - barcode
                - categories
                - id
                - name
                - url
        TeamStandings:
            type: object
            properties:
                rank:
                    type: integer
                    readOnly: true
                tied:
                    type: boolean
                    readOnly: true
                metrics:
                    type: array
                    items:
                        type: object
                        properties:
                            metric:
                                type: string
                                enum:
                                    - points
                                    - wins
                                    - speaks_sum
                                    - speaks_avg
                                    - speaks_ind_avg
                                    - speaks_stddev
                                    - draw_strength
                                    - draw_strength_speaks
                                    - margin_sum
                                    - margin_avg
                                    - npullups
                                    - pullup_debates
                                    - num_adjs
                                    - firsts
                                    - seconds
                                    - thirds
                                    - num_iron
                                    - wbw
                            value:
                                type: number
                    readOnly: true
                team:
                    type: string
                    format: uri
            required:
                - metrics
                - rank
                - team
                - tied
        Tournament:
            type: object
            properties:
                id:
                    type: integer
                    readOnly: true
                url:
                    type: string
                    format: uri
                    readOnly: true
                current_rounds:
                    type: array
                    items:
                        type: string
                        format: uri
                    readOnly: true
                _links:
                    allOf:
                        - $ref: "#/components/schemas/TournamentLinks"
                    readOnly: true
                    title: " links"
                name:
                    type: string
                    description:
                        The full name, e.g. "Australasian Intervarsity Debating Championships
                        2016"
                    maxLength: 100
                short_name:
                    type: string
                    description: The name used in the menu, e.g. "Australs 2016"
                    maxLength: 25
                seq:
                    type: integer
                    maximum: 2147483647
                    minimum: -2147483648
                    nullable: true
                    title: Sequence number
                    description:
                        A number that determines the relative order in which tournaments
                        are displayed on the homepage.
                slug:
                    type: string
                    description: The sub-URL of the tournament, cannot have spaces, e.g. "australs2016"
                    maxLength: 50
                    pattern: ^[-a-zA-Z0-9_]+$
                active:
                    type: boolean
            required:
                - _links
                - current_rounds
                - id
                - name
                - slug
                - url
        TournamentLinks:
            type: object
            properties:
                rounds:
                    type: string
                    format: uri
                    readOnly: true
                break_categories:
                    type: string
                    format: uri
                    readOnly: true
                speaker_categories:
                    type: string
                    format: uri
                    readOnly: true
                institutions:
                    type: string
                    format: uri
                    readOnly: true
                teams:
                    type: string
                    format: uri
                    readOnly: true
                adjudicators:
                    type: string
                    format: uri
                    readOnly: true
                speakers:
                    type: string
                    format: uri
                    readOnly: true
                venues:
                    type: string
                    format: uri
                    readOnly: true
                venue_categories:
                    type: string
                    format: uri
                    readOnly: true
                motions:
                    type: string
                    format: uri
                    readOnly: true
                feedback:
                    type: string
                    format: uri
                    readOnly: true
                feedback_questions:
                    type: string
                    format: uri
                    readOnly: true
                preferences:
                    type: string
                    format: uri
                    readOnly: true
            required:
                - adjudicators
                - break_categories
                - feedback
                - feedback_questions
                - institutions
                - motions
                - preferences
                - rounds
                - speaker_categories
                - speakers
                - teams
                - venue_categories
                - venues
        TournamentPermissions:
            type: object
            properties:
                tournament:
                    type: string
                    format: uri
                    readOnly: true
                groups:
                    type: array
                    items:
                        type: string
                        format: uri
                        default: []
                    default: []
                permissions:
                    type: array
                    items:
                        $ref: "#/components/schemas/PermissionsEnum"
            required:
                - tournament
        UpdateBallot:
            type: object
            description: Unused, just for OpenAPI with BallotSerializer.update()
            properties:
                confirmed:
                    type: boolean
                discarded:
                    type: boolean
        User:
            type: object
            properties:
                id:
                    type: integer
                    readOnly: true
                url:
                    type: string
                    format: uri
                    readOnly: true
                username:
                    type: string
                    description:
                        Required. 150 characters or fewer. Letters, digits and @/./+/-/_
                        only.
                    pattern: ^[\w.@+-]+$
                    maxLength: 150
                password:
                    type: string
                    writeOnly: true
                    maxLength: 128
                is_superuser:
                    type: boolean
                    title: Superuser status
                    description:
                        Designates that this user has all permissions without explicitly
                        assigning them.
                is_staff:
                    type: boolean
                    title: Staff status
                    description: Designates whether the user can log into this admin site.
                email:
                    type: string
                    format: email
                    title: Email address
                    maxLength: 254
                is_active:
                    type: boolean
                    title: Active
                    description:
                        Designates whether this user should be treated as active. Unselect
                        this instead of deleting accounts.
                date_joined:
                    type: string
                    format: date-time
                    readOnly: true
                last_login:
                    type: string
                    format: date-time
                    readOnly: true
                    nullable: true
                tournaments:
                    type: array
                    items:
                        $ref: "#/components/schemas/TournamentPermissions"
            required:
                - date_joined
                - id
                - last_login
                - password
                - url
                - username
        V1Links:
            type: object
            properties:
                tournaments:
                    type: string
                    format: uri
                    readOnly: true
                institutions:
                    type: string
                    format: uri
                    readOnly: true
                users:
                    type: string
                    format: uri
                    readOnly: true
            required:
                - institutions
                - tournaments
                - users
        V1Root:
            type: object
            properties:
                _links:
                    allOf:
                        - $ref: "#/components/schemas/V1Links"
                    readOnly: true
                    title: " links"
            required:
                - _links
        Venue:
            type: object
            properties:
                id:
                    type: integer
                    readOnly: true
                url:
                    type: string
                    format: uri
                    readOnly: true
                categories:
                    type: array
                    items:
                        type: string
                        format: uri
                display_name:
                    type: string
                    readOnly: true
                external_url:
                    type: string
                    format: uri
                _links:
                    allOf:
                        - $ref: "#/components/schemas/VenueLinks"
                    readOnly: true
                    title: " links"
                name:
                    type: string
                    maxLength: 40
                priority:
                    type: integer
                    maximum: 2147483647
                    minimum: -2147483648
                    description:
                        Rooms with a higher priority number will be preferred when
                        allocating rooms to debates
            required:
                - _links
                - categories
                - display_name
                - id
                - name
                - priority
                - url
        VenueCategory:
            type: object
            properties:
                id:
                    type: integer
                    readOnly: true
                url:
                    type: string
                    format: uri
                    readOnly: true
                venues:
                    type: array
                    items:
                        type: string
                        format: uri
                name:
                    type: string
                    description:
                        Name of category, e.g., "Purple", "Step-free access", "Close
                        to tab room". This name is shown when the category is prefixed or suffixed
                        to a room name in the draw, e.g., "Purple – G05".
                    maxLength: 80
                description:
                    type: string
                    description:
                        Description, as the predicate of a sentence, e.g. "has step-free
                        access", "is close to the briefing hall". This description follows "This
                        room" when shown in tooltips, e.g., "This room is close to the briefing
                        hall.".
                    maxLength: 200
                display_in_venue_name:
                    allOf:
                        - $ref: "#/components/schemas/DisplayInVenueNameEnum"
                    title: Display in room name
                    description: |-
                        Prefix: "Purple – G05", Suffix: "G05 – Purple"

                        * `-` - Don't display in room name
                        * `P` - Display as prefix
                        * `S` - Display as suffix
                display_in_public_tooltip:
                    type: boolean
                    description:
                        Displays the description in the tooltip for the room on public
                        pages. The description, if not blank, will always show on admin pages.
            required:
                - id
                - name
                - url
                - venues
        VenueConstraint:
            type: object
            properties:
                category:
                    type: string
                    format: uri
                priority:
                    type: integer
                    maximum: 2147483647
                    minimum: -2147483648
            required:
                - category
                - priority
        VenueLinks:
            type: object
            properties:
                checkin:
                    type: string
                    format: uri
                    readOnly: true
            required:
                - checkin
        Veto:
            type: object
            properties:
                team:
                    type: string
                    format: uri
                motion:
                    type: string
                    format: uri
            required:
                - motion
                - team
    securitySchemes:
        cookieAuth:
            type: apiKey
            in: cookie
            name: sessionid
        tokenAuth:
            type: apiKey
            in: header
            name: Authorization
            description: Token-based authentication with required prefix "Token"
